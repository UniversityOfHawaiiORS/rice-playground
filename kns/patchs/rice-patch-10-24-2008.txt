Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kim/util/DocumentAttributeSecurityUtils.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kim/util/DocumentAttributeSecurityUtils.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kim/util/DocumentAttributeSecurityUtils.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.commons.lang.StringUtils;
 import org.kuali.rice.kim.bo.FieldAttributeSecurity;
 import org.kuali.rice.kns.datadictionary.AttributeDefinition;
+import org.kuali.rice.kns.datadictionary.BusinessObjectEntry;
 import org.kuali.rice.kns.datadictionary.MaintainableCollectionDefinition;
 import org.kuali.rice.kns.datadictionary.MaintainableFieldDefinition;
 import org.kuali.rice.kns.datadictionary.MaintainableItemDefinition;
@@ -39,16 +40,15 @@
  */
 public class DocumentAttributeSecurityUtils {
 
-	public static Map<String, FieldAttributeSecurity> getRestrictionMaintainableFields(
-			MaintenanceDocumentEntry objectEntry) {
+	public static Map<String, FieldAttributeSecurity> getRestrictionMaintainableFields(MaintenanceDocumentEntry objectEntry) {
 		List<MaintainableSectionDefinition> maintainableSectionDefinitions = objectEntry
 				.getMaintainableSections();
 		Map<String, FieldAttributeSecurity> fieldAttributeSecurities = new HashMap<String, FieldAttributeSecurity>();
 		for (MaintainableSectionDefinition maintainableSectionDefinition : maintainableSectionDefinitions) {
 			List<MaintainableItemDefinition> maintainableItems = maintainableSectionDefinition
 					.getMaintainableItems();
-			getRestrictionMaintainableFieldList(fieldAttributeSecurities,
-					maintainableItems, null, objectEntry.getDocumentTypeName(), KNSConstants.EMPTY_STRING);
+			fieldAttributeSecurities.putAll(getRestrictionMaintainableFieldList(fieldAttributeSecurities,
+					maintainableItems, objectEntry.getBusinessObjectClass(), objectEntry.getDocumentTypeName(), KNSConstants.EMPTY_STRING));
 		}
 		return fieldAttributeSecurities;
 	}
@@ -56,25 +56,29 @@
 	private static Map<String, FieldAttributeSecurity> getRestrictionMaintainableFieldList(
 			Map<String, FieldAttributeSecurity> returnList, List items, Class boClass,
 			String documentTypeName, String key) {
+		if(boClass==null) return null;
 		for (Object item: items) {
 			if (item instanceof MaintainableFieldDefinition) {
 				MaintainableFieldDefinition maintainableFieldDefinition = (MaintainableFieldDefinition) item;
-				//retrieve attribDef from the DD for the BO (DDS.getDD().getBOE(boClass).getAttributeDefinition(item.getName());
-				AttributeDefinition attributeDefinition = 
-					(KNSServiceLocator.getDataDictionaryService().getDataDictionary().getBusinessObjectEntry(
-							boClass.getName()).getAttributeDefinition(maintainableFieldDefinition.getName()));
-
-				if(maintainableFieldDefinition.getAttributeSecurity()!=null || 
-						(attributeDefinition!=null && attributeDefinition.getAttributeSecurity()!=null)){
-					FieldAttributeSecurity fieldAttributeSecurity = new FieldAttributeSecurity();
-					fieldAttributeSecurity.setMaintainableFieldAttributeSecurity(
-							((MaintainableFieldDefinition) item).getAttributeSecurity());
-					fieldAttributeSecurity.setBusinessObjectAttributeSecurity(attributeDefinition.getAttributeSecurity());
-					fieldAttributeSecurity.setAttributeName(maintainableFieldDefinition.getName());
-					fieldAttributeSecurity.setBusinessObjectClass(boClass);
-					fieldAttributeSecurity.setDocumentTypeName(documentTypeName);
-					returnList.put(
-							(StringUtils.isEmpty(key)?"":key+".")+maintainableFieldDefinition.getName(), fieldAttributeSecurity);
+				BusinessObjectEntry businessObejctEntry = KNSServiceLocator.getDataDictionaryService().getDataDictionary().getBusinessObjectEntry(
+						boClass.getName());
+				if(businessObejctEntry!=null){
+					//retrieve attribDef from the DD for the BO (DDS.getDD().getBOE(boClass).getAttributeDefinition(item.getName());
+					AttributeDefinition attributeDefinition = 
+						businessObejctEntry.getAttributeDefinition(maintainableFieldDefinition.getName());
+	
+					if(maintainableFieldDefinition.getAttributeSecurity()!=null || 
+							(attributeDefinition!=null && attributeDefinition.getAttributeSecurity()!=null)){
+						FieldAttributeSecurity fieldAttributeSecurity = new FieldAttributeSecurity();
+						fieldAttributeSecurity.setMaintainableFieldAttributeSecurity(
+								((MaintainableFieldDefinition) item).getAttributeSecurity());
+						fieldAttributeSecurity.setBusinessObjectAttributeSecurity(attributeDefinition.getAttributeSecurity());
+						fieldAttributeSecurity.setAttributeName(maintainableFieldDefinition.getName());
+						fieldAttributeSecurity.setBusinessObjectClass(boClass);
+						fieldAttributeSecurity.setDocumentTypeName(documentTypeName);
+						returnList.put(
+								(StringUtils.isEmpty(key)?"":key+".")+maintainableFieldDefinition.getName(), fieldAttributeSecurity);
+					}
 				}
 			} else if (item instanceof MaintainableCollectionDefinition) {
 				MaintainableCollectionDefinition maintainableCollectionDefinition = (MaintainableCollectionDefinition) item;
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/maintenance/KualiMaintainableImpl.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/maintenance/KualiMaintainableImpl.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/maintenance/KualiMaintainableImpl.java	(working copy)
@@ -30,10 +30,12 @@
 import org.apache.commons.beanutils.PropertyUtils;
 import org.apache.commons.lang.StringUtils;
 import org.kuali.rice.core.service.EncryptionService;
+import org.kuali.rice.kns.authorization.FieldAuthorization;
 import org.kuali.rice.kns.bo.BusinessObject;
 import org.kuali.rice.kns.bo.BusinessObjectRelationship;
 import org.kuali.rice.kns.bo.DocumentHeader;
 import org.kuali.rice.kns.bo.PersistableBusinessObject;
+import org.kuali.rice.kns.bo.user.UniversalUser;
 import org.kuali.rice.kns.datadictionary.MaintainableCollectionDefinition;
 import org.kuali.rice.kns.datadictionary.MaintainableFieldDefinition;
 import org.kuali.rice.kns.datadictionary.MaintainableItemDefinition;
@@ -41,8 +43,8 @@
 import org.kuali.rice.kns.document.Document;
 import org.kuali.rice.kns.document.MaintenanceDocument;
 import org.kuali.rice.kns.document.MaintenanceLock;
-import org.kuali.rice.kns.document.authorization.DocumentAuthorizer;
-import org.kuali.rice.kns.exception.KualiException;
+import org.kuali.rice.kns.document.authorization.MaintenanceDocumentAuthorizations;
+import org.kuali.rice.kns.document.authorization.MaintenanceDocumentAuthorizer;
 import org.kuali.rice.kns.lookup.LookupUtils;
 import org.kuali.rice.kns.service.BusinessObjectDictionaryService;
 import org.kuali.rice.kns.service.BusinessObjectMetaDataService;
@@ -198,7 +200,7 @@
      * @param fieldValues - possibly with encrypted values
      * @return Map fieldValues - with no encrypted values
      */
-    private Map decryptEncryptedData(Map fieldValues, Document maintenanceDocument) {
+    private Map decryptEncryptedData(Map fieldValues, MaintenanceDocument maintenanceDocument) {
     	try {
 	        for (Iterator iter = fieldValues.keySet().iterator(); iter.hasNext();) {
 	                String fieldName = (String) iter.next();
@@ -228,24 +230,30 @@
         return fieldValues;
     }
 
-    private boolean shouldFieldBeEncrypted(Document maintenanceDocument, String fieldName){
-    	DocumentAuthorizer authorizer = KNSServiceLocator.getDocumentAuthorizationService().getDocumentAuthorizer(maintenanceDocument);
-    	Map editMap = authorizer.getEditMode(maintenanceDocument, GlobalVariables.getUserSession().getUniversalUser());
-    	String displayEditMode = getDisplayEditMode(maintenanceDocument, fieldName);
-    	// Non-blank displayEditMode implies that this field should be encrypted, if the user does not have appropriate permissions
+    private boolean shouldFieldBeEncrypted(MaintenanceDocument maintenanceDocument, String fieldName){
+    	MaintenanceDocumentAuthorizer authorizer = (MaintenanceDocumentAuthorizer)
+    		KNSServiceLocator.getDocumentAuthorizationService().getDocumentAuthorizer(maintenanceDocument);
+    	MaintenanceDocumentAuthorizations auths = 
+    		authorizer.getFieldAuthorizations(maintenanceDocument, GlobalVariables.getUserSession().getUniversalUser());
+    	// If the user does not have appropriate permissions, a non-blank displayEditMode implies that this field should be encrypted
     	// If the logged in user has the permission to view or edit this field, 
-    	// editMap will have an entry corresponding to displayEditMode, in which case, the field value received will not be encrypted 
-    	if(StringUtils.isNotBlank(displayEditMode) && (editMap==null || !editMap.containsKey(displayEditMode)))
-    		return true;
+    	// editMap will have an entry corresponding to displayEditMode, in which case, the field value received will not be encrypted
+    	// The corresponding value in editMap actually does not matter;
+    	// just the presence of the displayEditMode inside that map is enough.
+    	// Note: this "if" stmt is same as "${field.secure && empty KualiForm.editingMode[field.displayEditMode]}" of rowDisplay.jsp
+    	if(auths!=null && auths.hasAuthFieldRestricted(fieldName)){
+    		FieldAuthorization fieldAuth = auths.getAuthFieldAuthorization(fieldName);
+    		return fieldAuth.shouldBeEncrypted();
+    	}
     	return false;
     }
     
-    private String getDisplayEditMode(Document maintenanceDocument, String fieldName){
+    /*private String getDisplayEditMode(Document maintenanceDocument, String fieldName){
     	String docTypeName = maintenanceDocument.getDocumentHeader().getWorkflowDocument().getDocumentType();
     	MaintainableFieldDefinition fieldDefinition =
     		KNSServiceLocator.getMaintenanceDocumentDictionaryService().getMaintainableField(docTypeName, fieldName);
     	return fieldDefinition==null?null:fieldDefinition.getDisplayEditMode();
-	}
+	}*/
     
     /**
      * Calls method to get all the core sections for the business object defined in the data dictionary. Then determines if the bo
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/AttributeSecurity.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/AttributeSecurity.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/AttributeSecurity.java	(working copy)
@@ -147,4 +147,17 @@
 		}
 	}
 
+	public String getDisplayMaskValue(Object value){
+		String displayMaskValue = "";
+        if(isMask())
+        	displayMaskValue = getMaskFormatter().maskValue(value);
+        else if(isPartialMask())
+        	displayMaskValue = getPartialMaskFormatter().maskValue(value);
+        return displayMaskValue;
+	}
+	
+	public boolean shouldBeEncrypted(){
+		return isMask() || isPartialMask();
+	}
+	
 }
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/FieldDefinition.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/FieldDefinition.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/FieldDefinition.java	(working copy)
@@ -18,7 +18,6 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.kuali.rice.kns.datadictionary.exception.AttributeValidationException;
-import org.kuali.rice.kns.datadictionary.mask.Mask;
 import org.kuali.rice.kns.lookup.valueFinder.ValueFinder;
 
 /**
@@ -43,8 +42,9 @@
     protected Integer maxLength = null;
 
     protected String displayEditMode;
-    protected Mask displayMask;
 
+    private AttributeSecurity attributeSecurity;
+    
     public FieldDefinition() {
     }
 
@@ -244,22 +244,6 @@
         this.displayEditMode = displayEditMode;
     }
 
-
-    public Mask getDisplayMask() {
-        return displayMask;
-    }
-
-
-    /**
-     * The displayMask element specifies the type of masking to
-                    be used to hide the value from un-authorized users.
-                    There are three types of masking.
-     */
-    public void setDisplayMask(Mask displayMask) {
-        this.displayMask = displayMask;
-    }
-
-
     public boolean isReadOnlyAfterAdd() {
         return false;
     }
@@ -294,4 +278,18 @@
         }
         this.defaultValueFinderClass = defaultValueFinderClass;
     }
+    
+	/**
+	 * @return the attributeSecurity
+	 */
+	public AttributeSecurity getAttributeSecurity() {
+		return this.attributeSecurity;
+	}
+
+	/**
+	 * @param attributeSecurity the attributeSecurity to set
+	 */
+	public void setAttributeSecurity(AttributeSecurity attributeSecurity) {
+		this.attributeSecurity = attributeSecurity;
+	}
 }
\ No newline at end of file
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/MaintainableFieldDefinition.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/MaintainableFieldDefinition.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/MaintainableFieldDefinition.java	(working copy)
@@ -66,9 +66,6 @@
     protected String template;
     protected Class<? extends ValueFinder> defaultValueFinderClass;
 
-    protected String displayEditMode;
-    protected Mask displayMask;
-
     protected String webUILeaveFieldFunction = "";
     protected String webUILeaveFieldCallbackFunction = "";
     
@@ -132,55 +129,7 @@
         this.readOnly = readOnly;
     }
 
-
     /**
-     * Gets the displayEditMode attribute.
-     * 
-     * @return Returns the displayEditMode.
-     */
-    public String getDisplayEditMode() {
-        return displayEditMode;
-    }
-
-
-    /**
-     * The document authorizer classes have a method getEditMode, which is a map of edit mode to
-                        value mappings.  Depending on the context, the value of the mapping may be relevant, and the logic determining
-                        whether the value is relevant is often implemented in the JSP/tag layer.
-
-                        Fields on a document (particularily maintenance documents) may be associated with
-                        an edit mode.  If the edit mode is mapped to a relevant value, then the all fields associated with the edit mode
-                        will be rendered unhidden.
-
-                        The displayEditMode element is used to specify the edit mode that will be associated with the field.
-                        If the document authorizer returns a map with this edit mode mapped to a proper value, then the field will be unhidden to the user.
-                    
-     */
-    public void setDisplayEditMode(String displayEditMode) {
-        this.displayEditMode = displayEditMode;
-    }
-
-
-    /**
-     * Gets the displayMask attribute.
-     * 
-     * @return Returns the displayMask.
-     */
-    public Mask getDisplayMask() {
-        return displayMask;
-    }
-
-
-    /**
-     * The displayMask element specifies the type of masking to
-                    be used to hide the value from un-authorized users.
-                    There are three types of masking.
-     */
-    public void setDisplayMask(Mask displayMask) {
-        this.displayMask = displayMask;
-    }
-    
-    /**
      * Gets the overrideFieldConversions attribute. 
      * @return Returns the overrideFieldConversions.
      */
@@ -234,16 +183,6 @@
         if (defaultValueFinderClass != null && defaultValue != null) {
             throw new AttributeValidationException("Both defaultValue and defaultValueFinderClass can not be specified on attribute " + getName() + " in rootBusinessObjectClass " + rootBusinessObjectClass.getName());
         }
-
-        if (StringUtils.isNotBlank(displayEditMode) && displayMask == null) {
-            throw new AttributeValidationException("property '" + getName() + "' has a display edit mode defined but not a valid display mask '" + "' (" + "" + ")");
-        }
-
-        if (displayMask != null) {
-            if (getDisplayMask().getMaskFormatter() == null && getDisplayMask().getMaskFormatterClass() == null) {
-                throw new AttributeValidationException("No mask formatter or formatter class specified for secure attribute " + getName() + "' (" + "" + ")");
-            }
-        }
         if(attributeSecurity != null){
         	attributeSecurity.completeValidation(rootBusinessObjectClass, otherBusinessObjectClass);
         }
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/FieldDefinitionI.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/FieldDefinitionI.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/datadictionary/FieldDefinitionI.java	(working copy)
@@ -15,12 +15,13 @@
  */
 package org.kuali.rice.kns.datadictionary;
 
-import org.kuali.rice.kns.datadictionary.mask.Mask;
 
 public interface FieldDefinitionI {
     public String getName();
     public boolean isReadOnlyAfterAdd();
-    public Mask getDisplayMask();
-    public String getDisplayEditMode();
 
+	/**
+	 * @return the attributeSecurity
+	 */
+	public AttributeSecurity getAttributeSecurity();
 }
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/authorization/FieldAuthorization.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/authorization/FieldAuthorization.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/authorization/FieldAuthorization.java	(working copy)
@@ -28,6 +28,8 @@
     private String fieldName;
     private boolean editable;
     private boolean viewable;
+    private boolean masked;
+    private boolean partiallyMasked;
 
     /**
      * Constructs a FieldAuthorization.java.
@@ -63,8 +65,11 @@
     public FieldAuthorization(String fieldName, String fieldAuthorizationFlag) {
 
         // if an invalid flag is passed in, the choke on it
-        if (!fieldAuthorizationFlag.equals(Field.EDITABLE) && !fieldAuthorizationFlag.equals(Field.READONLY) && !fieldAuthorizationFlag.equals(Field.HIDDEN)) {
-            throw new IllegalArgumentException("The only allowable values are Field.HIDDEN, Field.READONLY, and Field.EDITABLE");
+        if (!fieldAuthorizationFlag.equals(Field.EDITABLE) && !fieldAuthorizationFlag.equals(Field.READONLY) 
+        		&& !fieldAuthorizationFlag.equals(Field.HIDDEN) && !fieldAuthorizationFlag.equals(Field.MASKED)
+        		&& !fieldAuthorizationFlag.equals(Field.PARTIALLY_MASKED)) {
+            throw new IllegalArgumentException("The only allowable values are " +
+            		"Field.HIDDEN, Field.READONLY, Field.EDITABLE, Field.MASKED and Field.PARTIALLY_MASKED");
         }
 
         this.fieldName = fieldName;
@@ -72,17 +77,21 @@
         if (fieldAuthorizationFlag.equals(Field.EDITABLE)) {
             this.editable = true;
             this.viewable = true;
-        }
-
-        if (fieldAuthorizationFlag.equals(Field.READONLY)) {
+        } else if (fieldAuthorizationFlag.equals(Field.READONLY)) {
             this.editable = false;
             this.viewable = true;
-        }
-
-        if (fieldAuthorizationFlag.equals(Field.HIDDEN)) {
+        } else if (fieldAuthorizationFlag.equals(Field.HIDDEN)) {
             this.editable = false;
             this.viewable = false;
-        }
+        } else if(fieldAuthorizationFlag.equals(Field.MASKED)){
+			this.masked = true;
+			this.viewable = true;
+			this.editable = true;
+		} else if(fieldAuthorizationFlag.equals(Field.PARTIALLY_MASKED)){
+			this.partiallyMasked = true;
+			this.viewable = true;
+			this.editable = true;
+		}
 
     }
 
@@ -116,7 +125,7 @@
      * 
      */
     public boolean isRestricted() {
-        if (!editable || !viewable) {
+        if (!editable || !viewable || masked || partiallyMasked) {
             return true;
         }
         else {
@@ -274,5 +283,21 @@
         return toString().hashCode();
     }
 
+	/**
+	 * @return the masked
+	 */
+	public boolean isMasked() {
+		return this.masked;
+	}
 
+	/**
+	 * @return the partiallyMasked
+	 */
+	public boolean isPartiallyMasked() {
+		return this.partiallyMasked;
+	}
+
+	public boolean shouldBeEncrypted(){
+		return isMasked() || isPartiallyMasked();
+	}
 }
 
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/service/impl/KeyValuesServiceImpl.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/service/impl/KeyValuesServiceImpl.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/service/impl/KeyValuesServiceImpl.java	(working copy)
@@ -34,7 +34,7 @@
 
     private BusinessObjectDao businessObjectDao;
     private PersistenceStructureService persistenceStructureService;
-
+    
     /**
      * @see org.kuali.rice.kns.service.KeyValuesService#findAll(java.lang.Class)
      */
@@ -123,4 +123,13 @@
 
         return containsActive;
     }
+    
+    /**
+     * @see org.kuali.rice.kns.service.KeyValuesService#findAll(java.lang.Class)
+     */
+    public Collection findAllInactive(Class clazz) {
+    	if (LOG.isDebugEnabled()) LOG.debug("Active indicator not found for class " + clazz.getName());
+        return businessObjectDao.findAllInactive(clazz);
+    }
+
 }
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/service/KeyValuesService.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/service/KeyValuesService.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/service/KeyValuesService.java	(working copy)
@@ -56,4 +56,14 @@
      * @return
      */
     public Collection findMatching(Class clazz, Map fieldValues);
+    
+    /**
+     * Retrieves a collection of business objects populated with data, such that each record in the database populates a new object
+     * instance. This will only retrieve business objects by class type.
+     * 
+     * @param clazz
+     * @return
+     */
+    public Collection findAllInactive(Class clazz);
+
 }
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/proxy/BusinessObjectDaoProxy.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/proxy/BusinessObjectDaoProxy.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/proxy/BusinessObjectDaoProxy.java	(working copy)
@@ -90,6 +90,13 @@
 	}
 
 	/**
+	 * @see org.kuali.rice.kns.dao.BusinessObjectDao#findAllInactive(java.lang.Class)
+	 */
+	public Collection findAllInactive(Class clazz) {
+		return getDao(clazz).findAllInactive(clazz);
+	}
+	
+	/**
 	 * @see org.kuali.rice.kns.dao.BusinessObjectDao#findAllActiveOrderBy(java.lang.Class, java.lang.String, boolean)
 	 */
 	public Collection findAllActiveOrderBy(Class clazz, String sortField, boolean sortAscending) {
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/BusinessObjectDao.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/BusinessObjectDao.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/BusinessObjectDao.java	(working copy)
@@ -80,6 +80,8 @@
      */
     public Collection findAllActive(Class clazz);
 
+    public Collection findAllInactive(Class clazz);
+    
     /**
      * Retrieves a collection of business objects populated with data, such that each record in the database populates a new object
      * instance. This will only retrieve business objects by class type. Orders the results by the given field.
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/impl/BusinessObjectDaoOjb.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/impl/BusinessObjectDaoOjb.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/impl/BusinessObjectDaoOjb.java	(working copy)
@@ -98,6 +98,13 @@
     }
 
     /**
+     * @see org.kuali.rice.kns.dao.BusinessObjectDao#findAllActive(java.lang.Class)
+     */
+    public Collection findAllInactive(Class clazz) {
+        return getPersistenceBrokerTemplate().getCollectionByQuery(QueryFactory.newQuery(clazz, buildInactiveCriteria()));
+    }
+
+    /**
      * @see org.kuali.rice.kns.dao.BusinessObjectDao#findAllActiveOrderBy(java.lang.Class, java.lang.String, boolean)
      */
     public Collection findAllActiveOrderBy(Class clazz, String sortField, boolean sortAscending) {
@@ -281,6 +288,17 @@
     }
     
     /**
+     * Builds a Criteria object for active field set to true
+     * @return Criteria
+     */
+    private Criteria buildInactiveCriteria(){
+        Criteria criteria = new Criteria();
+        criteria.addEqualTo(KNSPropertyConstants.ACTIVE, false);
+        
+        return criteria;
+    }
+    
+    /**
      * This method will build out criteria in the key-value paradigm (attribute-value).
      * 
      * @param negativeFieldValues
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/impl/BusinessObjectDaoJpa.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/impl/BusinessObjectDaoJpa.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/dao/impl/BusinessObjectDaoJpa.java	(working copy)
@@ -103,6 +103,13 @@
 	}
 
 	/**
+	 * @see org.kuali.rice.kns.dao.BusinessObjectDao#findAllActive(java.lang.Class)
+	 */
+	public Collection findAllInactive(Class clazz) {
+		return new org.kuali.rice.core.jpa.criteria.QueryByCriteria(entityManager, buildInactiveJpaCriteria(clazz)).toQuery().getResultList();
+	}
+	
+	/**
 	 * @see org.kuali.rice.kns.dao.BusinessObjectDao#findAllActiveOrderBy(java.lang.Class,
 	 *      java.lang.String, boolean)
 	 */
@@ -261,6 +268,12 @@
 		return criteria;
 	}
 
+	private org.kuali.rice.core.jpa.criteria.Criteria buildInactiveJpaCriteria(Class clazz) {
+		org.kuali.rice.core.jpa.criteria.Criteria criteria = new org.kuali.rice.core.jpa.criteria.Criteria(clazz.getName());
+		criteria.eq(KNSPropertyConstants.ACTIVE, false);
+		return criteria;
+	}
+
 	private org.kuali.rice.core.jpa.criteria.Criteria buildNegativeJpaCriteria(Class clazz, Map negativeFieldValues) {
 		org.kuali.rice.core.jpa.criteria.Criteria criteria = new org.kuali.rice.core.jpa.criteria.Criteria(clazz.getName());
 		for (Iterator i = negativeFieldValues.entrySet().iterator(); i.hasNext();) {
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/lookup/keyvalues/KeyValuesFinder.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/lookup/keyvalues/KeyValuesFinder.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/lookup/keyvalues/KeyValuesFinder.java	(working copy)
@@ -33,6 +33,13 @@
     public List getKeyValues();
 
     /**
+     * Builds a list of key values representations for valid value selections.
+     *
+     * @return List of KeyValue objects.
+     */
+    public List getKeyValues(boolean active);
+
+    /**
      * Returns a map with the key as the key of the map and the label as the value. Used to render the label instead of the code in
      * the jsp when the field is readonly.
      *
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/lookup/keyvalues/KeyValuesBase.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/lookup/keyvalues/KeyValuesBase.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/lookup/keyvalues/KeyValuesBase.java	(working copy)
@@ -80,4 +80,11 @@
             return "";
         }
     }
+    
+    /***
+     * @see org.kuali.rice.kns.lookup.keyvalues.KeyValuesFinder#getInactiveKeyValues()
+     */
+    public List getKeyValues(boolean active){
+    	return new ArrayList();
+    }
 }
\ No newline at end of file
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/util/FieldUtils.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/util/FieldUtils.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/util/FieldUtils.java	(working copy)
@@ -250,6 +250,7 @@
                                 ((PersistableBusinessObjectValuesFinder) finder).setIncludeKeyInDescription(control.getIncludeKeyInLabel());
                             }
                             field.setFieldValidValues(finder.getKeyValues());
+                            field.setFieldInactiveValidValues(finder.getKeyValues(false));
                         }
                     }
                     catch (InstantiationException e) {
@@ -465,6 +466,7 @@
                     }
 
                     // set encrypted & masked value if user does not have permission to see real value in UI
+                    // element.isSecure() => a non-null AttributeSecurity object is set in the field 
                     if (element.isSecure()) {
                         try {
                             if (obj != null && obj.toString().endsWith(EncryptionService.HASH_POST_PREFIX)) {
@@ -477,7 +479,7 @@
                         catch (GeneralSecurityException e) {
                             throw new RuntimeException("Unable to encrypt secure field " + e.getMessage());
                         }
-                        element.setDisplayMaskValue(element.getDisplayMask().maskValue(obj));
+                       	element.setDisplayMaskValue(element.getAttributeSecurity().getDisplayMaskValue(obj));
                     }
                 }
             }
@@ -776,15 +778,17 @@
 
     public static void applyAuthorization(Field field, MaintenanceDocumentAuthorizations auths) {
 
+    	String fieldName = "";
+    	FieldAuthorization fieldAuth = null;
         // only apply this on the newMaintainable
         if (field.getPropertyName().startsWith(KNSConstants.MAINTENANCE_NEW_MAINTAINABLE)) {
 
             // get just the actual fieldName, with the document.newMaintainableObject, etc etc removed
-            String fieldName = field.getPropertyName().substring(KNSConstants.MAINTENANCE_NEW_MAINTAINABLE.length());
+            fieldName = field.getPropertyName().substring(KNSConstants.MAINTENANCE_NEW_MAINTAINABLE.length());
 
             // if the field is restricted somehow
             if (auths.hasAuthFieldRestricted(fieldName)) {
-                FieldAuthorization fieldAuth = auths.getAuthFieldAuthorization(fieldName);
+                fieldAuth = auths.getAuthFieldAuthorization(fieldName);
 
                 // if its an editable field, allow decreasing availability to readonly or hidden
                 if (Field.isInputField(field.getFieldType()) || field.getFieldType().equalsIgnoreCase(Field.CHECKBOX)) {
@@ -808,22 +812,27 @@
                 if (field.isReadOnly() && fieldAuth.isHidden()) {
                     field.setFieldType(Field.HIDDEN);
                 }
+                
             }
             // special check for old maintainable - need to ensure that fields hidden on the
             // "new" side are also hidden on the old side
         }
         else if (field.getPropertyName().startsWith(KNSConstants.MAINTENANCE_OLD_MAINTAINABLE)) {
             // get just the actual fieldName, with the document.oldMaintainableObject, etc etc removed
-            String fieldName = field.getPropertyName().substring(KNSConstants.MAINTENANCE_OLD_MAINTAINABLE.length());
+            fieldName = field.getPropertyName().substring(KNSConstants.MAINTENANCE_OLD_MAINTAINABLE.length());
             // if the field is restricted somehow
             if (auths.hasAuthFieldRestricted(fieldName)) {
-                FieldAuthorization fieldAuth = auths.getAuthFieldAuthorization(fieldName);
+                fieldAuth = auths.getAuthFieldAuthorization(fieldName);
 
                 if (fieldAuth.isHidden()) {
                     field.setFieldType(Field.HIDDEN);
                 }
             }
         }
+        //For both new and old maintainable, set authorization
+        if(fieldAuth!=null){
+            field.setAuthorization(fieldAuth);
+        }
     }
 
     /**
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/web/ui/FieldBridge.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/web/ui/FieldBridge.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/web/ui/FieldBridge.java	(working copy)
@@ -83,15 +83,7 @@
         /* setup security of field (sensitive data) if needed, note this will always be true on old maintainables since
          * maintenanceAction is not set
          */
-        String displayEditMode = definition.getDisplayEditMode();
-        if (StringUtils.isNotBlank(displayEditMode)) {
-
-            field.setSecure(true);
-            field.setDisplayEditMode(displayEditMode);
-            field.setDisplayMask(definition.getDisplayMask());
-
-        }
-
+        field.setAttributeSecurity(definition.getAttributeSecurity());
     }
 
     /**
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/web/ui/Field.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/web/ui/Field.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/web/ui/Field.java	(working copy)
@@ -21,7 +21,8 @@
 import java.util.Map;
 
 import org.apache.commons.lang.StringUtils;
-import org.kuali.rice.kns.datadictionary.mask.Mask;
+import org.kuali.rice.kns.authorization.FieldAuthorization;
+import org.kuali.rice.kns.datadictionary.AttributeSecurity;
 import org.kuali.rice.kns.lookup.HtmlData;
 import org.kuali.rice.kns.util.KNSConstants;
 import org.kuali.rice.kns.web.format.BooleanFormatter;
@@ -54,6 +55,10 @@
     public static final String KUALIUSER = "kualiuser";
     public static final String READONLY = "readOnly";
     public static final String EDITABLE = "editable";
+    public static final String MASKED = "masked";
+    public static final String MASKED_READONLY = "maskedReadOnly";
+    public static final String PARTIALLY_MASKED = "partiallyMasked";
+    public static final String PARTIALLY_MASKED_READONLY = "partiallyMaskedReadOnly";
     public static final String LOOKUP_HIDDEN = "lookuphidden";
     public static final String LOOKUP_READONLY = "lookupreadonly";
     public static final String WORKFLOW_WORKGROUP = "workflowworkgroup";
@@ -92,13 +97,20 @@
     private boolean fieldRequired;
     private String fieldType;
     private List fieldValidValues;
+    private List fieldInactiveValidValues;
     private Formatter formatter;
     private boolean highlightField;
     private boolean isReadOnly;
     private String lookupParameters;
     private int maxLength;
+    
     private String propertyName;
     private String propertyValue;
+    private String encryptedValue;
+    private String displayMaskValue;
+    private AttributeSecurity attributeSecurity;
+    private FieldAuthorization authorization;
+    
     private HtmlData inquiryURL;
     private String propertyPrefix;
     private String quickFinderClassNameImpl;
@@ -116,11 +128,6 @@
     private String personNameAttributeName;
     private String defaultValue = KNSConstants.EMPTY_STRING;
     private boolean keyField;
-    private String displayEditMode;
-    private Mask displayMask;
-    private String displayMaskValue;
-    private String encryptedValue;
-    private boolean secure;
     private String webOnBlurHandler;
     private String webOnBlurHandlerCallback;
     private String styleClass;
@@ -262,7 +269,6 @@
         this.isReadOnly = false;
         this.upperCase = false;
         this.keyField = false;
-        this.secure = false;
         this.fieldLevelHelpEnabled = false;
     }
 
@@ -528,7 +534,24 @@
 
         return propertyValue;
     }
+    
+    /**
+     * Gets the displayMaskValue attribute.
+     * 
+     * @return Returns the displayMaskValue.
+     */
+    public String getDisplayMaskValue() {
+        return displayMaskValue;
+    }
 
+    /**
+     * Sets the displayMaskValue attribute value.
+     * 
+     * @param displayMaskValue The displayMaskValue to set.
+     */
+    public void setDisplayMaskValue(String displayMaskValue) {
+        this.displayMaskValue = displayMaskValue;
+    }
 
     /**
      * Gets the propertyPrefix attribute.
@@ -1069,62 +1092,7 @@
         this.keyField = keyField;
     }
 
-
     /**
-     * Gets the displayEditMode attribute.
-     * 
-     * @return Returns the displayEditMode.
-     */
-    public String getDisplayEditMode() {
-        return displayEditMode;
-    }
-
-    /**
-     * Sets the displayEditMode attribute value.
-     * 
-     * @param displayEditMode The displayEditMode to set.
-     */
-    public void setDisplayEditMode(String displayEditMode) {
-        this.displayEditMode = displayEditMode;
-    }
-
-    /**
-     * Gets the displayMask attribute.
-     * 
-     * @return Returns the displayMask.
-     */
-    public Mask getDisplayMask() {
-        return displayMask;
-    }
-
-    /**
-     * Sets the displayMask attribute value.
-     * 
-     * @param displayMask The displayMask to set.
-     */
-    public void setDisplayMask(Mask displayMask) {
-        this.displayMask = displayMask;
-    }
-
-    /**
-     * Gets the displayMaskValue attribute.
-     * 
-     * @return Returns the displayMaskValue.
-     */
-    public String getDisplayMaskValue() {
-        return displayMaskValue;
-    }
-
-    /**
-     * Sets the displayMaskValue attribute value.
-     * 
-     * @param displayMaskValue The displayMaskValue to set.
-     */
-    public void setDisplayMaskValue(String displayMaskValue) {
-        this.displayMaskValue = displayMaskValue;
-    }
-
-    /**
      * Gets the encryptedValue attribute.
      * 
      * @return Returns the encryptedValue.
@@ -1148,19 +1116,10 @@
      * @return Returns the secure.
      */
     public boolean isSecure() {
-        return secure;
+        return attributeSecurity!=null && authorization!=null && authorization.shouldBeEncrypted();
     }
 
     /**
-     * Sets the secure attribute value.
-     * 
-     * @param secure The secure to set.
-     */
-    public void setSecure(boolean secure) {
-        this.secure = secure;
-    }
-
-    /**
      * Returns the method name of a function present in the page which should be called
      * when the user tabs away from the field.
      * 
@@ -1378,6 +1337,55 @@
     public void setFieldDirectInquiryEnabled(boolean fieldDirectInquiryEnabled) {
         this.fieldDirectInquiryEnabled = fieldDirectInquiryEnabled;
     }
-    
-    
+
+	/**
+	 * @return the fieldInactiveValidValues
+	 */
+	public List getFieldInactiveValidValues() {
+		return this.fieldInactiveValidValues;
+	}
+
+	/**
+	 * @param fieldInactiveValidValues the fieldInactiveValidValues to set
+	 */
+	public void setFieldInactiveValidValues(List fieldInactiveValidValues) {
+		this.fieldInactiveValidValues = fieldInactiveValidValues;
+	}
+
+	/**
+	 * @return the attributeSecurity
+	 */
+	public AttributeSecurity getAttributeSecurity() {
+		return this.attributeSecurity;
+	}
+
+	/**
+	 * @param attributeSecurity the attributeSecurity to set
+	 */
+	public void setAttributeSecurity(AttributeSecurity attributeSecurity) {
+		this.attributeSecurity = attributeSecurity;
+	}
+
+	/**
+	 * @return the authorization
+	 */
+	public FieldAuthorization getAuthorization() {
+		return this.authorization;
+	}
+
+	/**
+	 * @param authorization the authorization to set
+	 */
+	public void setAuthorization(FieldAuthorization authorization) {
+		this.authorization = authorization;
+	}
+	
+	public boolean isMasked(){
+		return (authorization!=null && authorization.isMasked());
+	}
+
+	public boolean isPartiallyMasked(){
+		return (authorization!=null && authorization.isPartiallyMasked());
+	}
+
 }
\ No newline at end of file
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/document/authorization/MaintenanceDocumentAuthorizations.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/document/authorization/MaintenanceDocumentAuthorizations.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/document/authorization/MaintenanceDocumentAuthorizations.java	(working copy)
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.log4j.Logger;
 import org.kuali.rice.kns.authorization.FieldAuthorization;
 import org.kuali.rice.kns.web.ui.Field;
@@ -144,7 +145,43 @@
     }
 
     /**
+     * This method adds the fieldName specified as masked.
      * 
+     * @param fieldName
+     */
+    public void addMaskedAuthField(String fieldName) {
+        addAuthField(fieldName, Field.MASKED);
+    }
+
+    /**
+     * This method adds the fieldName specified as partially masked.
+     * 
+     * @param fieldName
+     */
+    public void addPartiallyMaskedAuthField(String fieldName) {
+        addAuthField(fieldName, Field.PARTIALLY_MASKED);
+    }
+
+    /**
+     * This method adds the fieldName specified as masked.
+     * 
+     * @param fieldName
+     */
+    public void addMaskedReadOnlyAuthField(String fieldName) {
+        addAuthField(fieldName, Field.MASKED_READONLY);
+    }
+
+    /**
+     * This method adds the fieldName specified as partially masked.
+     * 
+     * @param fieldName
+     */
+    public void addPartiallyMaskedReadOnlyAuthField(String fieldName) {
+        addAuthField(fieldName, Field.PARTIALLY_MASKED_READONLY);
+    }
+    
+    /**
+     * 
      * Returns a collection of all the sections that have non-default authorization restrictions.
      * 
      * @return Collection of section names that are restricted
@@ -164,12 +201,13 @@
      * 
      */
     public FieldAuthorization getAuthFieldAuthorization(String fieldName) {
-        if (authFields.containsKey(fieldName)) {
+    	//fieldName.replaceAll("(\\[[0-9]*\\])", "");
+    	if (authFields.containsKey(fieldName)) {
             return new FieldAuthorization(fieldName, (String) authFields.get(fieldName));
         }
         else {
             return new FieldAuthorization(fieldName, Field.EDITABLE);
         }
     }
-
+    
 }
Index: C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/document/authorization/MaintenanceDocumentAuthorizerBase.java
===================================================================
--- C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/document/authorization/MaintenanceDocumentAuthorizerBase.java	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/java/org/kuali/rice/kns/document/authorization/MaintenanceDocumentAuthorizerBase.java	(working copy)
@@ -1,173 +1,271 @@
-/*
- * Copyright 2007 The Kuali Foundation.
- * 
- * Licensed under the Educational Community License, Version 1.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.opensource.org/licenses/ecl1.php
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.kuali.rice.kns.document.authorization;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.commons.lang.StringUtils;
-import org.kuali.rice.kns.authorization.AuthorizationConstants;
-import org.kuali.rice.kns.bo.user.UniversalUser;
-import org.kuali.rice.kns.datadictionary.MaintainableFieldDefinition;
-import org.kuali.rice.kns.datadictionary.MaintainableItemDefinition;
-import org.kuali.rice.kns.datadictionary.MaintainableSectionDefinition;
-import org.kuali.rice.kns.document.Document;
-import org.kuali.rice.kns.document.MaintenanceDocument;
-import org.kuali.rice.kns.service.KNSServiceLocator;
-import org.kuali.rice.kns.util.KNSConstants;
-import org.kuali.rice.kns.workflow.service.KualiWorkflowDocument;
-
-public class MaintenanceDocumentAuthorizerBase extends DocumentAuthorizerBase implements MaintenanceDocumentAuthorizer {
-
-    /**
-     * @see org.kuali.rice.kns.authorization.MaintenanceDocumentAuthorizer#getFieldAuthorizations(org.kuali.rice.kns.document.MaintenanceDocument,
-     *      org.kuali.rice.kns.bo.user.KualiUser)
-     */
-    public MaintenanceDocumentAuthorizations getFieldAuthorizations(MaintenanceDocument document, UniversalUser user) {
-        // by default, there are no restrictions, only if this method is
-        // overridden by a subclass that adds restrictions
-        return new MaintenanceDocumentAuthorizations();
-    }
-
-    /**
-     * 
-     * @see org.kuali.rice.kns.authorization.DocumentAuthorizer#getDocumentActionFlags(org.kuali.rice.kns.document.Document,
-     *      org.kuali.rice.kns.bo.user.KualiUser)
-     */
-    public DocumentActionFlags getDocumentActionFlags(Document document, UniversalUser user) {
-
-        // run the super, let the common flags be set
-        MaintenanceDocumentActionFlags docActionFlags = new MaintenanceDocumentActionFlags(super.getDocumentActionFlags(document, user));
-
-        // run the fieldAuthorizations
-        MaintenanceDocument maintDoc = (MaintenanceDocument) document;
-        MaintenanceDocumentAuthorizations docAuths = getFieldAuthorizations(maintDoc, user);
-
-        // if there are any field restrictions for this user, then we need to turn off the
-        // ability to BlanketApprove, as this person doesnt have access to all the fields, so
-        // they certainly cant blanket approve it.
-        if (docAuths.hasAnyFieldRestrictions()) {
-            docActionFlags.setCanBlanketApprove(false);
-        }
-
-        KualiWorkflowDocument workflowDocument = document.getDocumentHeader().getWorkflowDocument();
-
-        // if a user can't initiate a document of this type then they can't copy one, either
-        if (!canCopy(workflowDocument.getDocumentType(), user)) {
-            docActionFlags.setCanCopy(false);
-        }
-        else {
-            docActionFlags.setCanCopy(document.getAllowsCopy() && (!workflowDocument.stateIsInitiated() && !workflowDocument.stateIsEnroute() && !workflowDocument.stateIsException() && !workflowDocument.stateIsSaved()));
-        }
-
-        return docActionFlags;
-    }
-
-    /**
-     * @see org.kuali.rice.kns.authorization.DocumentAuthorizer#getEditMode(org.kuali.rice.kns.document.Document,
-     *      org.kuali.rice.kns.bo.user.KualiUser)
-     */
-    public Map getEditMode(Document document, UniversalUser user) {
-
-        // if this is not a MaintenanceDocument, then fail loudly, something is badly wrong
-        if (!MaintenanceDocument.class.isAssignableFrom(document.getClass())) {
-            throw new IllegalArgumentException("A document was passed into MaintenanceDocumentAuthorizerBase.getEditMode() " + "that is not a MaintenanceDocument descendent.  Processing cannot continue.");
-        }
-
-        Map editMode = new HashMap();
-        
-        // cast the document as a MaintenanceDocument, and get a handle on the workflowDocument
-        MaintenanceDocument maintenanceDocument = (MaintenanceDocument) document;
-        KualiWorkflowDocument workflowDocument = maintenanceDocument.getDocumentHeader().getWorkflowDocument();
-
-        // default to view-only, as a safety precaution
-        String editModeKey = AuthorizationConstants.MaintenanceEditMode.VIEW_ONLY;
-
-        // if the document is cancelled, then its view only
-        if (workflowDocument.stateIsCanceled()) {
-            editModeKey = AuthorizationConstants.MaintenanceEditMode.VIEW_ONLY;
-        }
-
-        // if the document is being edited, then its full entry, or if the current user is
-        // the system supervisor
-        else if (workflowDocument.stateIsInitiated() || workflowDocument.stateIsSaved()) {
-            if (workflowDocument.userIsInitiator(user)) {
-                editModeKey = AuthorizationConstants.MaintenanceEditMode.FULL_ENTRY;
-                
-                // initiators of documents for new records can view these fields for the documents while they're sitll under the control
-                // of the initiators.  If they are always allowed access to the document, then they would be able to view the changes that
-                // were made during routing, which would be a bad idea, as the router may have edited sensitive information enroute
-                if (isDocumentForCreatingNewEntry(maintenanceDocument)) {
-                    addAllMaintDocDefinedEditModesToMap(editMode, maintenanceDocument);
-                }
-            }
-        }
-
-        // if the document is in routing, then we have some special rules
-        else if (workflowDocument.stateIsEnroute()) {
-
-            // the person who has the approval request in their Actiong List
-            // should be able to modify the document
-            if (workflowDocument.isApprovalRequested()) {
-                editModeKey = AuthorizationConstants.MaintenanceEditMode.APPROVER_EDIT_ENTRY;
-            }
-        }
-
-        // save the editmode
-        editMode.put(editModeKey, "TRUE");
-        return editMode;
-    }
-
-    protected void addAllMaintDocDefinedEditModesToMap(Map editModes, MaintenanceDocument maintDoc) {
-        String docTypeName = maintDoc.getDocumentHeader().getWorkflowDocument().getDocumentType();
-        List<MaintainableSectionDefinition> sectionDefinitions = KNSServiceLocator.getMaintenanceDocumentDictionaryService().getMaintainableSections(docTypeName);
-        
-        for ( MaintainableSectionDefinition sectionDefinition : sectionDefinitions ) {
-            for ( MaintainableItemDefinition itemDefinition : sectionDefinition.getMaintainableItems() ) {
-                if (itemDefinition instanceof MaintainableFieldDefinition) {
-                    String displayEditMode = ((MaintainableFieldDefinition) itemDefinition).getDisplayEditMode();
-                    if (StringUtils.isNotBlank(displayEditMode)) {
-                        editModes.put(displayEditMode, "TRUE");
-                    }
-                }
-                // TODO: what about MaintainableCollectionDefinition?
-            }
-        }
-    }
-    
-    /**
-     * This method returns whether this document is creating a new entry in the maintenible/underlying table
-     * 
-     * This method is useful to determine whether all the field-based edit modes should be enabled, which is 
-     * useful in determining which fields are encrypted
-     * 
-     * This method considers that Constants.MAINTENANCE_NEWWITHEXISTING_ACTION is not a new document because 
-     * there is uncertainity how documents with this action will actually be implemented
-     * 
-     * @param maintDoc
-     * @param user
-     * @return
-     */
-    protected boolean isDocumentForCreatingNewEntry(MaintenanceDocument maintDoc) {
-        // the rule is as follows: if the maint doc represents a new record AND the user is the same user who initiated the maintenance doc
-        // if the user check is not added, then it would be pointless to do any encryption since I can just pull up a document to view the encrypted values
-        
-        // A maint doc is new when the new maintainable maintenance flag is set to either Constants.MAINTENANCE_NEW_ACTION or Constants.MAINTENANCE_COPY_ACTION
-        String maintAction = maintDoc.getNewMaintainableObject().getMaintenanceAction();
-        return (KNSConstants.MAINTENANCE_NEW_ACTION.equals(maintAction) || KNSConstants.MAINTENANCE_COPY_ACTION.equals(maintAction));
-    }
-}
+/*
+ * Copyright 2007 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.kuali.rice.kns.document.authorization;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import org.apache.commons.lang.StringUtils;
+import org.kuali.rice.kim.bo.FieldAttributeSecurity;
+import org.kuali.rice.kim.bo.types.dto.AttributeSet;
+import org.kuali.rice.kim.service.IdentityManagementService;
+import org.kuali.rice.kim.service.KIMServiceLocator;
+import org.kuali.rice.kim.util.DocumentAttributeSecurityUtils;
+import org.kuali.rice.kim.util.KimConstants;
+import org.kuali.rice.kns.authorization.AuthorizationConstants;
+import org.kuali.rice.kns.bo.user.UniversalUser;
+import org.kuali.rice.kns.datadictionary.MaintainableFieldDefinition;
+import org.kuali.rice.kns.datadictionary.MaintainableItemDefinition;
+import org.kuali.rice.kns.datadictionary.MaintainableSectionDefinition;
+import org.kuali.rice.kns.datadictionary.MaintenanceDocumentEntry;
+import org.kuali.rice.kns.document.Document;
+import org.kuali.rice.kns.document.MaintenanceDocument;
+import org.kuali.rice.kns.service.KNSServiceLocator;
+import org.kuali.rice.kns.service.MaintenanceDocumentDictionaryService;
+import org.kuali.rice.kns.util.KNSConstants;
+import org.kuali.rice.kns.workflow.service.KualiWorkflowDocument;
+import org.kuali.rice.kns.datadictionary.AttributeSecurity;
+
+
+public class MaintenanceDocumentAuthorizerBase extends DocumentAuthorizerBase implements MaintenanceDocumentAuthorizer {
+	private static IdentityManagementService identityManagementService;
+	private static MaintenanceDocumentDictionaryService  maintenanceDocumentDictionaryService;
+	
+	/**
+     * @see org.kuali.rice.kns.authorization.MaintenanceDocumentAuthorizer#getFieldAuthorizations(org.kuali.rice.kns.document.MaintenanceDocument,
+     *      org.kuali.rice.kns.bo.user.KualiUser)
+     */
+    public MaintenanceDocumentAuthorizations getFieldAuthorizations(MaintenanceDocument document, UniversalUser user) {
+       
+        // by default, there are no restrictions, only if this method is
+        // overridden by a subclass that adds restrictions
+        //return new MaintenanceDocumentAuthorizations();
+       
+    	MaintenanceDocumentAuthorizations auths = new MaintenanceDocumentAuthorizations();
+    	KualiWorkflowDocument workflowDocument = document.getDocumentHeader().getWorkflowDocument();
+    	String documentType = document.getDocumentHeader().getWorkflowDocument().getDocumentType();
+    	String docStatus = workflowDocument.getRouteHeader().getDocRouteStatus();      	 
+    	String documentNumber = document.getDocumentNumber();
+    	String routeNodeNames = workflowDocument.getCurrentRouteNodeNames();
+    	
+    	MaintenanceDocumentEntry objectEntry = getMaintenanceDocumentDictionaryService().getMaintenanceDocumentEntry(documentType);
+    	Map<String, FieldAttributeSecurity> restrictionFields = DocumentAttributeSecurityUtils.getRestrictionMaintainableFields(objectEntry);
+    	
+    	Set keys = restrictionFields.keySet();    
+    	Iterator keyIter = keys.iterator();
+        while (keyIter.hasNext()) { 
+           String fullFieldName = (String) keyIter.next(); 
+           FieldAttributeSecurity fieldAttributeSecurity = (FieldAttributeSecurity) restrictionFields.get(fullFieldName);
+           String fieldName = fieldAttributeSecurity.getAttributeName();
+           
+           //TODO:Should use ParameterService.getDetailType to get the componentName
+           String componentName = fieldAttributeSecurity.getBusinessObjectClass().getSimpleName();
+           
+           AttributeSecurity maintainableFieldAttributeSecurity = 
+        	   (AttributeSecurity) fieldAttributeSecurity.getMaintainableFieldAttributeSecurity();
+           AttributeSecurity  businessObjectAttributeSecurity = 
+        	   (AttributeSecurity) fieldAttributeSecurity.getBusinessObjectAttributeSecurity();
+           
+           AttributeSet permissionDetails = new AttributeSet();
+       	   permissionDetails.put(KimConstants.KIM_ATTRIB_ROUTE_STATUS_CODE, docStatus);
+       	   permissionDetails.put(KimConstants.KIM_ATTRIB_DOCUMENT_TYPE_NAME, documentType);
+       	   permissionDetails.put(KimConstants.KIM_ATTRIB_DOCUMENT_NUMBER, documentNumber);
+    	   permissionDetails.put(KimConstants.KIM_ATTRIB_ROUTE_NODE_NAME, routeNodeNames);
+    	   permissionDetails.put(KimConstants.KIM_ATTRIB_PROPERTY_NAME, fieldName);
+    	   //TODO: Should use ParameterService getNameSpace to get name space
+    	   permissionDetails.put(KimConstants.KIM_ATTRIB_NAMESPACE_CODE, "KFS-SYS");
+    	   
+           
+    	   if(maintainableFieldAttributeSecurity != null){
+    		   permissionDetails.put(KimConstants.KIM_ATTRIB_COMPONENT_NAME, documentType);
+    		   if(maintainableFieldAttributeSecurity.isMask()){  
+    			   if(!getIdentityManagementService().isAuthorizedByTemplateName(user.getPersonUniversalIdentifier(), KimConstants.PERMISSION_UNMASK_PROPERTY, permissionDetails, null)){
+    				   auths.addReadonlyAuthField(fullFieldName);
+    			   }
+    			   //auths.addMaskedAuthField(fullFieldName);
+    			   auths.addReadonlyAuthField(fullFieldName);
+    		   }
+    	   }
+    	   
+    	   if(businessObjectAttributeSecurity != null){
+    		   permissionDetails.put(KimConstants.KIM_ATTRIB_COMPONENT_NAME, componentName);
+    		   if( businessObjectAttributeSecurity.isMask()){
+               	   if(!getIdentityManagementService().isAuthorizedByTemplateName(user.getPersonUniversalIdentifier(), "Unmask Bank Account Number", permissionDetails, null)){
+               		auths.addReadonlyAuthField(fullFieldName);
+               	   }
+    		   }
+    		   
+    	   }
+        }
+    	
+    	return auths; 
+    }
+
+    /**
+     * 
+     * @see org.kuali.rice.kns.authorization.DocumentAuthorizer#getDocumentActionFlags(org.kuali.rice.kns.document.Document,
+     *      org.kuali.rice.kns.bo.user.KualiUser)
+     */
+    public DocumentActionFlags getDocumentActionFlags(Document document, UniversalUser user) {
+
+        // run the super, let the common flags be set
+        MaintenanceDocumentActionFlags docActionFlags = new MaintenanceDocumentActionFlags(super.getDocumentActionFlags(document, user));
+
+        // run the fieldAuthorizations
+        MaintenanceDocument maintDoc = (MaintenanceDocument) document;
+        MaintenanceDocumentAuthorizations docAuths = getFieldAuthorizations(maintDoc, user);
+
+        // if there are any field restrictions for this user, then we need to turn off the
+        // ability to BlanketApprove, as this person doesnt have access to all the fields, so
+        // they certainly cant blanket approve it.
+        if (docAuths.hasAnyFieldRestrictions()) {
+            docActionFlags.setCanBlanketApprove(false);
+        }
+
+        KualiWorkflowDocument workflowDocument = document.getDocumentHeader().getWorkflowDocument();
+
+        // if a user can't initiate a document of this type then they can't copy one, either
+        if (!canCopy(workflowDocument.getDocumentType(), user)) {
+            docActionFlags.setCanCopy(false);
+        }
+        else {
+            docActionFlags.setCanCopy(document.getAllowsCopy() && (!workflowDocument.stateIsInitiated() && !workflowDocument.stateIsEnroute() && !workflowDocument.stateIsException() && !workflowDocument.stateIsSaved()));
+        }
+
+        return docActionFlags;
+    }
+
+    /**
+     * @see org.kuali.rice.kns.authorization.DocumentAuthorizer#getEditMode(org.kuali.rice.kns.document.Document,
+     *      org.kuali.rice.kns.bo.user.KualiUser)
+     */
+    public Map getEditMode(Document document, UniversalUser user) {
+
+        // if this is not a MaintenanceDocument, then fail loudly, something is badly wrong
+        if (!MaintenanceDocument.class.isAssignableFrom(document.getClass())) {
+            throw new IllegalArgumentException("A document was passed into MaintenanceDocumentAuthorizerBase.getEditMode() " + "that is not a MaintenanceDocument descendent.  Processing cannot continue.");
+        }
+
+        Map editMode = new HashMap();
+        
+        // cast the document as a MaintenanceDocument, and get a handle on the workflowDocument
+        MaintenanceDocument maintenanceDocument = (MaintenanceDocument) document;
+        KualiWorkflowDocument workflowDocument = maintenanceDocument.getDocumentHeader().getWorkflowDocument();
+
+        // default to view-only, as a safety precaution
+        String editModeKey = AuthorizationConstants.MaintenanceEditMode.VIEW_ONLY;
+
+        // if the document is cancelled, then its view only
+        if (workflowDocument.stateIsCanceled()) {
+            editModeKey = AuthorizationConstants.MaintenanceEditMode.VIEW_ONLY;
+        }
+
+        // if the document is being edited, then its full entry, or if the current user is
+        // the system supervisor
+        else if (workflowDocument.stateIsInitiated() || workflowDocument.stateIsSaved()) {
+            if (workflowDocument.userIsInitiator(user)) {
+                editModeKey = AuthorizationConstants.MaintenanceEditMode.FULL_ENTRY;
+                
+                // initiators of documents for new records can view these fields for the documents while they're sitll under the control
+                // of the initiators.  If they are always allowed access to the document, then they would be able to view the changes that
+                // were made during routing, which would be a bad idea, as the router may have edited sensitive information enroute
+                if (isDocumentForCreatingNewEntry(maintenanceDocument)) {
+                    addAllMaintDocDefinedEditModesToMap(editMode, maintenanceDocument);
+                }
+            }
+        }
+
+        // if the document is in routing, then we have some special rules
+        else if (workflowDocument.stateIsEnroute()) {
+
+            // the person who has the approval request in their Actiong List
+            // should be able to modify the document
+            if (workflowDocument.isApprovalRequested()) {
+                editModeKey = AuthorizationConstants.MaintenanceEditMode.APPROVER_EDIT_ENTRY;
+            }
+        }
+
+        // save the editmode
+        editMode.put(editModeKey, "TRUE");
+        return editMode;
+    }
+
+    protected void addAllMaintDocDefinedEditModesToMap(Map editModes, MaintenanceDocument maintDoc) {
+        String docTypeName = maintDoc.getDocumentHeader().getWorkflowDocument().getDocumentType();
+        List<MaintainableSectionDefinition> sectionDefinitions = KNSServiceLocator.getMaintenanceDocumentDictionaryService().getMaintainableSections(docTypeName);
+        
+        for ( MaintainableSectionDefinition sectionDefinition : sectionDefinitions ) {
+            for ( MaintainableItemDefinition itemDefinition : sectionDefinition.getMaintainableItems() ) {
+                if (itemDefinition instanceof MaintainableFieldDefinition) {
+                    /*String displayEditMode = ((MaintainableFieldDefinition) itemDefinition).getDisplayEditMode();
+                    if (StringUtils.isNotBlank(displayEditMode)) {
+                        editModes.put(displayEditMode, "TRUE");
+                    }*/
+                }
+                // TODO: what about MaintainableCollectionDefinition?
+            }
+        }
+    }
+    
+    /**
+     * This method returns whether this document is creating a new entry in the maintenible/underlying table
+     * 
+     * This method is useful to determine whether all the field-based edit modes should be enabled, which is 
+     * useful in determining which fields are encrypted
+     * 
+     * This method considers that Constants.MAINTENANCE_NEWWITHEXISTING_ACTION is not a new document because 
+     * there is uncertainity how documents with this action will actually be implemented
+     * 
+     * @param maintDoc
+     * @param user
+     * @return
+     */
+    protected boolean isDocumentForCreatingNewEntry(MaintenanceDocument maintDoc) {
+        // the rule is as follows: if the maint doc represents a new record AND the user is the same user who initiated the maintenance doc
+        // if the user check is not added, then it would be pointless to do any encryption since I can just pull up a document to view the encrypted values
+        
+        // A maint doc is new when the new maintainable maintenance flag is set to either Constants.MAINTENANCE_NEW_ACTION or Constants.MAINTENANCE_COPY_ACTION
+        String maintAction = maintDoc.getNewMaintainableObject().getMaintenanceAction();
+        return (KNSConstants.MAINTENANCE_NEW_ACTION.equals(maintAction) || KNSConstants.MAINTENANCE_COPY_ACTION.equals(maintAction));
+    }
+    
+	/**
+	 * @return the identityManagementService
+	 */
+	public static IdentityManagementService getIdentityManagementService() {
+		
+		if (identityManagementService == null ) {
+			identityManagementService = KIMServiceLocator.getIdentityManagementService();
+		}
+		return identityManagementService;
+	}
+    
+	
+	/**
+	 * @return the maintenanceDocumentDictionaryService
+	 */
+	public static MaintenanceDocumentDictionaryService getMaintenanceDocumentDictionaryService() {
+		
+		if (maintenanceDocumentDictionaryService == null ) {
+			maintenanceDocumentDictionaryService = KNSServiceLocator.getMaintenanceDocumentDictionaryService();
+		}
+		return maintenanceDocumentDictionaryService;
+	}
+
+    
+}
Index: C:/java/projects/rice/impl/src/main/resources/org/kuali/rice/kns/config/KNSSpringBeans.xml
===================================================================
--- C:/java/projects/rice/impl/src/main/resources/org/kuali/rice/kns/config/KNSSpringBeans.xml	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/resources/org/kuali/rice/kns/config/KNSSpringBeans.xml	(working copy)
@@ -895,4 +895,7 @@
 		</property>
 	</bean>	
 	
+	<bean id="DocumentStatusComponentAttributePermissionType" class="org.kuali.rice.kim.service.support.impl.KimPermissionTypeServiceBase" >
+	</bean>
+	
 </beans>
Index: C:/java/projects/rice/impl/src/main/resources/org/kuali/rice/kns/document/datadictionary/UniversalUserMaintenanceDocument.xml
===================================================================
--- C:/java/projects/rice/impl/src/main/resources/org/kuali/rice/kns/document/datadictionary/UniversalUserMaintenanceDocument.xml	(revision 5077)
+++ C:/java/projects/rice/impl/src/main/resources/org/kuali/rice/kns/document/datadictionary/UniversalUserMaintenanceDocument.xml	(working copy)
@@ -113,15 +113,14 @@
         <bean parent="MaintainableFieldDefinition"
               p:name="personTaxIdentifierTypeCode" />
         <bean parent="MaintainableFieldDefinition">
-          <property name="displayMask" >
-            <bean parent="Mask">
-              <property name="maskFormatter" >
-                <bean parent="MaskFormatterLiteral"
-                      p:literal="***************" />
-              </property>
-            </bean>
-          </property>
-          <property name="displayEditMode" value="ssnEditEntry" />
+		  <property name="attributeSecurity">
+		    	<bean class="org.kuali.rice.kns.datadictionary.AttributeSecurity">
+		    		<property name="mask" value="true"></property>
+		    		<property name="maskFormatter">
+		    			<bean parent="MaskFormatterLiteral" p:literal="*********" />
+		    		</property>
+		    	</bean>
+		  </property>
           <property name="name" value="personTaxIdentifier" />
         </bean>
         <bean parent="MaintainableFieldDefinition"
Index: C:/java/projects/rice/web/src/main/webapp/en/WEB-INF/jsp/RowDisplay.jsp
===================================================================
--- C:/java/projects/rice/web/src/main/webapp/en/WEB-INF/jsp/RowDisplay.jsp	(revision 5077)
+++ C:/java/projects/rice/web/src/main/webapp/en/WEB-INF/jsp/RowDisplay.jsp	(working copy)
@@ -1,8 +1,8 @@
-<%@ taglib uri="../tld/struts-html-el.tld" prefix="html-el" %>
-<%@ taglib uri="../tld/struts-bean-el.tld" prefix="bean-el" %>
-<%@ taglib uri="../tld/struts-logic-el.tld" prefix="logic-el"%>
-<%@ taglib uri="../tld/c.tld" prefix="c" %>
-<%@ taglib uri="../tld/fmt.tld" prefix="fmt" %>
+<%@ taglib uri="../tld/struts-html-el.tld" prefix="html-el" %>
+<%@ taglib uri="../tld/struts-bean-el.tld" prefix="bean-el" %>
+<%@ taglib uri="../tld/struts-logic-el.tld" prefix="logic-el"%>
+<%@ taglib uri="../tld/c.tld" prefix="c" %>
+<%@ taglib uri="../tld/fmt.tld" prefix="fmt" %>
 <%@ taglib uri="../tld/displaytag.tld" prefix="display-el" %>
 	
 <c:set var="isRowLabel" value="" />	
@@ -70,6 +70,16 @@
 															</c:otherwise>
 														</c:choose>
 													</c:forEach>
+													<c:forEach items="${field.fieldInactiveValidValues}" var="select">
+													  <c:choose>
+															<c:when test="${field.propertyValue==select.key}" >
+																<option value='<c:out value="${select.key}"/>' selected="selected"><c:out value="${select.label}" /></option>
+															</c:when>
+															<c:otherwise>
+																<option value='<c:out value="${select.key}" />'><c:out value="${select.label}" /></option>
+															</c:otherwise>
+														</c:choose>
+													</c:forEach>
 												</select>
 										</c:when>
 										<c:when test="${field.fieldType==field.DROPDOWN_REFRESH}" >
@@ -101,23 +111,23 @@
 										<c:when test="${field.fieldType==field.QUICKFINDER}" >
 								  	        <c:if test="${field.propertyValue!=null && field.propertyValue!=''}">
 												<c:out value="${field.propertyValue}" />
-											</c:if>
-									        <c:set var="customConversionFields" value=""/>
-											<c:forEach items="${field.customConversions}" var="customKeyValue">
-										        <c:if test="${!empty customConversionFields}">
-												  <c:set var="customConversionFields" value="${customConversionFields},"/>
-												</c:if>
-										        <c:set var="customConversionFields" value="${customConversionFields}${customKeyValue.key}:${customKeyValue.value}"/>
-											</c:forEach>
-											<c:if test="${FormName != null}" >
-												<c:choose>
-													<c:when test="${!empty customConversionFields}">
-											            <a href="javascript:quick_finder_with_conversions('<c:out value="${field.quickFinderClassNameImpl}" />','<c:out value="${FormName}" />', '<c:out value="${ActionName}" />', '<c:out value="${customConversionFields}" />')"><img src="images/searchicon.gif" alt="search" align="absmiddle"></a>
-													</c:when>
-													<c:otherwise>
-											            <a href="javascript:quick_finder('<c:out value="${field.quickFinderClassNameImpl}" />','<c:out value="${FormName}" />', '<c:out value="${ActionName}" />')"><img src="images/searchicon.gif" alt="search" align="absmiddle"></a>
-													</c:otherwise>
-												</c:choose>
+											</c:if>
+									        <c:set var="customConversionFields" value=""/>
+											<c:forEach items="${field.customConversions}" var="customKeyValue">
+										        <c:if test="${!empty customConversionFields}">
+												  <c:set var="customConversionFields" value="${customConversionFields},"/>
+												</c:if>
+										        <c:set var="customConversionFields" value="${customConversionFields}${customKeyValue.key}:${customKeyValue.value}"/>
+											</c:forEach>
+											<c:if test="${FormName != null}" >
+												<c:choose>
+													<c:when test="${!empty customConversionFields}">
+											            <a href="javascript:quick_finder_with_conversions('<c:out value="${field.quickFinderClassNameImpl}" />','<c:out value="${FormName}" />', '<c:out value="${ActionName}" />', '<c:out value="${customConversionFields}" />')"><img src="images/searchicon.gif" alt="search" align="absmiddle"></a>
+													</c:when>
+													<c:otherwise>
+											            <a href="javascript:quick_finder('<c:out value="${field.quickFinderClassNameImpl}" />','<c:out value="${FormName}" />', '<c:out value="${ActionName}" />')"><img src="images/searchicon.gif" alt="search" align="absmiddle"></a>
+													</c:otherwise>
+												</c:choose>
 									        </c:if>
 									      	<c:if test="${FormName == null}">  
 											     <a href="javascript:lookup('<c:out value="${field.quickFinderClassNameImpl}"/>', '<c:out value="${ActionName}" />')"><img src="images/searchicon.gif" alt="search" align="absmiddle"></a>
Index: C:/java/projects/rice/web/src/main/webapp/WEB-INF/tags/kr/htmlControlAttribute.tag
===================================================================
--- C:/java/projects/rice/web/src/main/webapp/WEB-INF/tags/kr/htmlControlAttribute.tag	(revision 5077)
+++ C:/java/projects/rice/web/src/main/webapp/WEB-INF/tags/kr/htmlControlAttribute.tag	(working copy)
@@ -35,7 +35,7 @@
 <%@ attribute name="encryptValue" required="false"
 			  description="when readOnly or hidden field, boolean to indicate whether the value should
 			  be encrypted and display masked. Defaults to false." %>
-<%@ attribute name="displayMask" required="false"
+<%@ attribute name="displayMaskValue" required="false"
 			  description="when a field is not to be displayed in clear text and encrypted as hidden, the
 			  string to display." %>
 <%@ attribute name="styleClass" required="false"
@@ -109,7 +109,7 @@
             %>
             <html:hidden property="encryptedProperties('${fn:replace(property,'.','_')}')" value="true"/>
             <html:hidden write="false" property="${property}" style="${textStyle}"/>
-            ${displayMask}
+            ${displayMaskValue}
          </c:when>
          <c:otherwise>
          <logic:empty name="KualiForm" property="${property}">
Index: C:/java/projects/rice/web/src/main/webapp/WEB-INF/tags/kr/rowDisplay.tag
===================================================================
--- C:/java/projects/rice/web/src/main/webapp/WEB-INF/tags/kr/rowDisplay.tag	(revision 5077)
+++ C:/java/projects/rice/web/src/main/webapp/WEB-INF/tags/kr/rowDisplay.tag	(working copy)
@@ -98,7 +98,7 @@
                 
 			<%-- isFieldSecure determines whether or not the encrypted value should be shown for 
 			non-collections and a similar function for collections --%>
-			<c:set var="isFieldSecure" value="${field.secure && empty KualiForm.editingMode[field.displayEditMode]}" />
+			<c:set var="isFieldSecure" value="${field.secure}" />
 				
 			<%-- textStyle is used to store the style of the field value. i.e. whether or not it 
 			should display as red text. --%>
@@ -173,7 +173,7 @@
 
 				</c:when>
 
-				<c:when test="${isFieldReadOnly && not isFieldAContainer and field.fieldType ne field.FILE}">
+				<c:when test="${isFieldReadOnly && not isFieldSecure && not isFieldAContainer and field.fieldType ne field.FILE}">
 					<c:choose>
 						<c:when test= "${isInquiry || isLookup}">
 					  		<input type="hidden" name="${field.propertyName}" value='<c:out value="${fieldValue}"/>' />
@@ -653,68 +653,68 @@
 					</td>
 				
 				</c:when>
-				
-				<c:when test="${field.fieldType eq field.FILE}">
-					<kul:fieldDefaultLabel isLookup="${isLookup}" isRequired="${field.fieldRequired}" isReadOnly="${isFieldReadOnly}" 
-						cellWidth="${dataCellWidth}%" fieldType="${field.fieldType}" fieldLabel="${field.fieldLabel}" fieldName="${field.propertyName}"/>
-								
-					<td class="grid" width="${dataCellWidth}%">
-						<c:choose>
-							<c:when test="${isFieldReadOnly}">
-								<c:if test="${empty fieldValue}" >
-									<c:out value="<%=((String) request.getAttribute("fileName"))%>" />&nbsp;
-								</c:if>
-								<c:if test="${not empty fieldValue}" >
-									<kul:fieldShowReadOnly field="${field}" addHighlighting="${addHighlighting}" />
-								</c:if>
-							</c:when> 
-									
-							<c:otherwise>
-									<c:choose>
-										<c:when test="${empty fieldValue}" >
-											<c:if test="${isMaintenance}" >
-											<input type="file" name='${field.propertyName}'
-												id='${field.propertyName}' 
-												size='${field.size}'
-												class="${field.styleClass}"/>
-											</c:if>
-										</c:when>
-										<c:otherwise>
-										<div id="replaceDiv" style="display:block;">
-											<html:image property="methodToCall.downloadAttachment" src="${ConfigProperties.kr.externalizable.images.url}clip.gif" alt="download attachment" style="padding:5px" onclick="excludeSubmitRestriction=true"/>
-											<c:out value="${fieldValue}"/>
-	                                    	&nbsp;&nbsp;
-	                                    		                                    	<input type="hidden" name='methodToCall' />
-    										<script type="text/javascript">
-												function replaceAttachment() {
-													excludeSubmitRestriction=true;
-													showHide('replaceFileDiv','replaceDiv');
-													document.forms[0].methodToCall.value='replaceAttachment';
-													submitForm();
-												}
-											</script>
-	                                    	<html:link linkName="replaceAttachment" onclick="javascript: replaceAttachment();" href="" anchor="" property="methodToCall.replaceAttachment">replace</html:link>
-	                                    </div>
-                                    	<div id="replaceFileDiv" valign="middle" style="display:none;">
-				                			<input type="file" name='${field.propertyName}'
-												id='${field.propertyName}' 
-												size='${field.size}'
-												class="${field.styleClass}"/>  
-										</div>
-										</c:otherwise>
-									</c:choose>
-									
-								 	
-								<kul:fieldShowIcons isReadOnly="${isFieldReadOnly}" field="${field}" addHighlighting="${addHighlighting}" />
-							
-							</c:otherwise>
-					
-						</c:choose>
-						</div>
-					</td>
-				    
-				</c:when>
-									
+				
+				<c:when test="${field.fieldType eq field.FILE}">
+					<kul:fieldDefaultLabel isLookup="${isLookup}" isRequired="${field.fieldRequired}" isReadOnly="${isFieldReadOnly}" 
+						cellWidth="${dataCellWidth}%" fieldType="${field.fieldType}" fieldLabel="${field.fieldLabel}" fieldName="${field.propertyName}"/>
+								
+					<td class="grid" width="${dataCellWidth}%">
+						<c:choose>
+							<c:when test="${isFieldReadOnly}">
+								<c:if test="${empty fieldValue}" >
+									<c:out value="<%=((String) request.getAttribute("fileName"))%>" />&nbsp;
+								</c:if>
+								<c:if test="${not empty fieldValue}" >
+									<kul:fieldShowReadOnly field="${field}" addHighlighting="${addHighlighting}" />
+								</c:if>
+							</c:when> 
+									
+							<c:otherwise>
+									<c:choose>
+										<c:when test="${empty fieldValue}" >
+											<c:if test="${isMaintenance}" >
+											<input type="file" name='${field.propertyName}'
+												id='${field.propertyName}' 
+												size='${field.size}'
+												class="${field.styleClass}"/>
+											</c:if>
+										</c:when>
+										<c:otherwise>
+										<div id="replaceDiv" style="display:block;">
+											<html:image property="methodToCall.downloadAttachment" src="${ConfigProperties.kr.externalizable.images.url}clip.gif" alt="download attachment" style="padding:5px" onclick="excludeSubmitRestriction=true"/>
+											<c:out value="${fieldValue}"/>
+	                                    	&nbsp;&nbsp;
+	                                    		                                    	<input type="hidden" name='methodToCall' />
+    										<script type="text/javascript">
+												function replaceAttachment() {
+													excludeSubmitRestriction=true;
+													showHide('replaceFileDiv','replaceDiv');
+													document.forms[0].methodToCall.value='replaceAttachment';
+													submitForm();
+												}
+											</script>
+	                                    	<html:link linkName="replaceAttachment" onclick="javascript: replaceAttachment();" href="" anchor="" property="methodToCall.replaceAttachment">replace</html:link>
+	                                    </div>
+                                    	<div id="replaceFileDiv" valign="middle" style="display:none;">
+				                			<input type="file" name='${field.propertyName}'
+												id='${field.propertyName}' 
+												size='${field.size}'
+												class="${field.styleClass}"/>  
+										</div>
+										</c:otherwise>
+									</c:choose>
+									
+								 	
+								<kul:fieldShowIcons isReadOnly="${isFieldReadOnly}" field="${field}" addHighlighting="${addHighlighting}" />
+							
+							</c:otherwise>
+					
+						</c:choose>
+						</div>
+					</td>
+				    
+				</c:when>
+									
 				<c:when test="${field.fieldType eq field.LOOKUP_HIDDEN || field.fieldType eq field.LOOKUP_READONLY}">
 			    
 					<kul:fieldDefaultLabel isLookup="${isLookup}" isRequired="${field.fieldRequired}" 
Index: C:/java/projects/rice/web/src/main/webapp/WEB-INF/tags/kr/readonlyfield.tag
===================================================================
--- C:/java/projects/rice/web/src/main/webapp/WEB-INF/tags/kr/readonlyfield.tag	(revision 5077)
+++ C:/java/projects/rice/web/src/main/webapp/WEB-INF/tags/kr/readonlyfield.tag	(working copy)
@@ -1,52 +1,60 @@
-<%--
- Copyright 2007 The Kuali Foundation.
- 
- Licensed under the Educational Community License, Version 1.0 (the "License");
- you may not use this file except in compliance with the License.
- You may obtain a copy of the License at
- 
- http://www.opensource.org/licenses/ecl1.php
- 
- Unless required by applicable law or agreed to in writing, software
- distributed under the License is distributed on an "AS IS" BASIS,
- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- See the License for the specific language governing permissions and
- limitations under the License.
---%>
-<%@ include file="/kr/WEB-INF/jsp/tldHeader.jsp"%>
-
-<%@ attribute name="field" required="true" type="org.kuali.rice.kns.web.ui.Field"%>
-<%@ attribute name="addHighlighting" required="false"
-              description="boolean indicating if this field should be highlighted (to indicate old/new change)" %>
-
-<c:set var="result">
-    <c:choose>
-      <c:when test="${field.fieldType==field.DROPDOWN or field.fieldType==field.DROPDOWN_APC or field.fieldType==field.DROPDOWN_REFRESH or field.fieldType==field.DROPDOWN_SCRIPT or field.fieldType==field.RADIO}">
-        <c:set var="value_found" value="false" />
-        <c:forEach items="${field.fieldValidValues}" var="select">
-          <c:if test="${field.propertyValue==select.key}">
-            <c:out value="${select.label}" />
-            <c:set var="value_found" value="true" />
-          </c:if>
-        </c:forEach>
-        <c:if test="${!value_found}">
-          <c:out value="${KualiForm.unconvertedValues[field.propertyName]}" default="${field.propertyValue}" />
-        </c:if>
-      </c:when>
-      <c:when test="${field.fieldType==field.TEXT_AREA}">
-      	<pre><c:out value="${KualiForm.unconvertedValues[field.propertyName]}" default="${field.propertyValue}" /></pre>
-      </c:when>
-      <c:otherwise>
-        <c:out value="${KualiForm.unconvertedValues[field.propertyName]}" default="${field.propertyValue}" />
-      </c:otherwise>
-    </c:choose>
-</c:set>
-
-<c:choose>
-  <c:when test="${empty result}">&nbsp;</c:when>
-  <c:otherwise>${result}</c:otherwise>
-</c:choose>
-
-<c:if test="${addHighlighting && field.highlightField}">
-   <kul:fieldShowChangedIcon />
+<%--
+ Copyright 2007 The Kuali Foundation.
+ 
+ Licensed under the Educational Community License, Version 1.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ 
+ http://www.opensource.org/licenses/ecl1.php
+ 
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+--%>
+<%@ include file="/kr/WEB-INF/jsp/tldHeader.jsp"%>
+
+<%@ attribute name="field" required="true" type="org.kuali.rice.kns.web.ui.Field"%>
+<%@ attribute name="addHighlighting" required="false"
+              description="boolean indicating if this field should be highlighted (to indicate old/new change)" %>
+
+<c:set var="result">
+    <c:choose>
+      <c:when test="${field.fieldType==field.DROPDOWN or field.fieldType==field.DROPDOWN_APC or field.fieldType==field.DROPDOWN_REFRESH or field.fieldType==field.DROPDOWN_SCRIPT or field.fieldType==field.RADIO}">
+        <c:set var="value_found" value="false" />
+        <c:forEach items="${field.fieldValidValues}" var="select">
+          <c:if test="${field.propertyValue==select.key}">
+            <c:out value="${select.label}" />
+            <c:set var="value_found" value="true" />
+          </c:if>
+        </c:forEach>
+        <c:if test="${!value_found}">
+			<c:forEach items="${field.fieldInactiveValidValues}" var="select">
+	          <c:if test="${field.propertyValue==select.key}">
+	            <c:out value="${select.label}" />
+	            <c:set var="value_found" value="true" />
+	          </c:if>
+	        </c:forEach>
+        </c:if>
+        <c:if test="${!value_found}">
+          <c:out value="${KualiForm.unconvertedValues[field.propertyName]}" default="${field.propertyValue}" />
+        </c:if>
+      </c:when>
+      <c:when test="${field.fieldType==field.TEXT_AREA}">
+      	<pre><c:out value="${KualiForm.unconvertedValues[field.propertyName]}" default="${field.propertyValue}" /></pre>
+      </c:when>
+      <c:otherwise>
+        <c:out value="${KualiForm.unconvertedValues[field.propertyName]}" default="${field.propertyValue}" />
+      </c:otherwise>
+    </c:choose>
+</c:set>
+
+<c:choose>
+  <c:when test="${empty result}">&nbsp;</c:when>
+  <c:otherwise>${result}</c:otherwise>
+</c:choose>
+
+<c:if test="${addHighlighting && field.highlightField}">
+   <kul:fieldShowChangedIcon />
 </c:if>
\ No newline at end of file
