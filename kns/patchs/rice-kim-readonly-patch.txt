### Eclipse Workspace Patch 1.0
#P rice
Index: impl/src/main/java/org/kuali/rice/kns/web/ui/FieldBridge.java
===================================================================
--- impl/src/main/java/org/kuali/rice/kns/web/ui/FieldBridge.java	(revision 5428)
+++ impl/src/main/java/org/kuali/rice/kns/web/ui/FieldBridge.java	(working copy)
@@ -64,7 +64,7 @@
 
             MaintainableFieldDefinition maintainableFieldDefinition = ((MaintainableFieldDefinition) definition);
             field.setFieldRequired(maintainableFieldDefinition.isRequired());
-            field.setReadOnly(maintainableFieldDefinition.isReadOnly());
+            field.setReadOnly(maintainableFieldDefinition.isUnconditionallyReadOnly());
             if (maintainableFieldDefinition.isLookupReadOnly()) {
             	field.setFieldType(Field.LOOKUP_READONLY);
             }
@@ -324,7 +324,7 @@
             // if this flag is set, and the current field is required, and readonly, and blank, use the
             // defaultValueFinder if one exists
             if (autoFillBlankRequiredValues) {
-                if ( maintainableFieldDefinition.isRequired() && maintainableFieldDefinition.isReadOnly() ) {
+                if ( maintainableFieldDefinition.isRequired() && maintainableFieldDefinition.isUnconditionallyReadOnly() ) {
                     if ( StringUtils.isBlank( field.getPropertyValue() ) ) {
                         Class defaultValueFinderClass = maintainableFieldDefinition.getDefaultValueFinderClass();
                         if (defaultValueFinderClass != null) {
Index: impl/src/main/java/org/kuali/rice/kns/service/impl/MaintenanceDocumentDictionaryServiceImpl.java
===================================================================
--- impl/src/main/java/org/kuali/rice/kns/service/impl/MaintenanceDocumentDictionaryServiceImpl.java	(revision 5428)
+++ impl/src/main/java/org/kuali/rice/kns/service/impl/MaintenanceDocumentDictionaryServiceImpl.java	(working copy)
@@ -541,7 +541,7 @@
             throw new IllegalArgumentException("invalid fieldName parameter.");
         }
         // if required check we have a value for this field
-        if (maintainableFieldDefinition.isRequired() && !maintainableFieldDefinition.isReadOnly() ) {
+        if (maintainableFieldDefinition.isRequired() && !maintainableFieldDefinition.isUnconditionallyReadOnly() ) {
             try {
                 Object obj = ObjectUtils.getNestedValue(businessObject, fieldName);
 
Index: impl/src/main/java/org/kuali/rice/kns/datadictionary/MaintainableFieldDefinition.java
===================================================================
--- impl/src/main/java/org/kuali/rice/kns/datadictionary/MaintainableFieldDefinition.java	(revision 5428)
+++ impl/src/main/java/org/kuali/rice/kns/datadictionary/MaintainableFieldDefinition.java	(working copy)
@@ -57,7 +57,7 @@
 public class MaintainableFieldDefinition extends MaintainableItemDefinition implements FieldDefinitionI{
 
     protected boolean required = false;
-    protected boolean readOnly = false;
+    protected boolean unconditionallyReadOnly = false;
     protected boolean readOnlyAfterAdd = false;
     private boolean noLookup = false;
     private boolean lookupReadOnly = false;
@@ -118,22 +118,22 @@
         return defaultValueFinderClass;
     }
 
+    
     /**
-     * @return Returns the readOnly.
-     */
-    public boolean isReadOnly() {
-        return readOnly;
-    }
+	 * @return the unconditionallyReadOnly
+	 */
+	public boolean isUnconditionallyReadOnly() {
+		return this.unconditionallyReadOnly;
+	}
 
-    /**
-     * readOnly is true if it cannot be updated
-     */
-    public void setReadOnly(boolean readOnly) {
-        this.readOnly = readOnly;
-    }
+	/**
+	 * @param unconditionallyReadOnly the unconditionallyReadOnly to set
+	 */
+	public void setUnconditionallyReadOnly(boolean unconditionallyReadOnly) {
+		this.unconditionallyReadOnly = unconditionallyReadOnly;
+	}
 
-
-    /**
+	/**
      * Gets the displayEditMode attribute.
      * 
      * @return Returns the displayEditMode.
