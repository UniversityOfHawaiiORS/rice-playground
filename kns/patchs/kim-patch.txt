### Eclipse Workspace Patch 1.0
#P rice
Index: impl/src/main/java/org/kuali/rice/kns/document/authorization/MaintenanceDocumentAuthorizerBase.java
===================================================================
--- impl/src/main/java/org/kuali/rice/kns/document/authorization/MaintenanceDocumentAuthorizerBase.java	(revision 4976)
+++ impl/src/main/java/org/kuali/rice/kns/document/authorization/MaintenanceDocumentAuthorizerBase.java	(working copy)
@@ -16,31 +16,96 @@
 package org.kuali.rice.kns.document.authorization;
 
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-
+import java.util.Set;
 import org.apache.commons.lang.StringUtils;
+import org.kuali.rice.kim.bo.FieldAttributeSecurity;
+import org.kuali.rice.kim.bo.types.dto.AttributeSet;
+import org.kuali.rice.kim.service.IdentityManagementService;
+import org.kuali.rice.kim.service.KIMServiceLocator;
+import org.kuali.rice.kim.util.DocumentAttributeSecurityUtils;
+import org.kuali.rice.kim.util.KimConstants;
 import org.kuali.rice.kns.authorization.AuthorizationConstants;
 import org.kuali.rice.kns.bo.user.UniversalUser;
 import org.kuali.rice.kns.datadictionary.MaintainableFieldDefinition;
 import org.kuali.rice.kns.datadictionary.MaintainableItemDefinition;
 import org.kuali.rice.kns.datadictionary.MaintainableSectionDefinition;
+import org.kuali.rice.kns.datadictionary.MaintenanceDocumentEntry;
 import org.kuali.rice.kns.document.Document;
 import org.kuali.rice.kns.document.MaintenanceDocument;
 import org.kuali.rice.kns.service.KNSServiceLocator;
+import org.kuali.rice.kns.service.MaintenanceDocumentDictionaryService;
 import org.kuali.rice.kns.util.KNSConstants;
 import org.kuali.rice.kns.workflow.service.KualiWorkflowDocument;
+import org.kuali.rice.kns.datadictionary.AttributeSecurity;
 
+
 public class MaintenanceDocumentAuthorizerBase extends DocumentAuthorizerBase implements MaintenanceDocumentAuthorizer {
-
-    /**
+	private static IdentityManagementService identityManagementService;
+	private static MaintenanceDocumentDictionaryService  maintenanceDocumentDictionaryService;
+	
+	/**
      * @see org.kuali.rice.kns.authorization.MaintenanceDocumentAuthorizer#getFieldAuthorizations(org.kuali.rice.kns.document.MaintenanceDocument,
      *      org.kuali.rice.kns.bo.user.KualiUser)
      */
     public MaintenanceDocumentAuthorizations getFieldAuthorizations(MaintenanceDocument document, UniversalUser user) {
-        // by default, there are no restrictions, only if this method is
-        // overridden by a subclass that adds restrictions
-        return new MaintenanceDocumentAuthorizations();
+       
+    	MaintenanceDocumentAuthorizations auths = new MaintenanceDocumentAuthorizations();
+    	KualiWorkflowDocument workflowDocument = document.getDocumentHeader().getWorkflowDocument();
+    	String documentType = document.getDocumentHeader().getWorkflowDocument().getDocumentType();
+    	String docStatus = workflowDocument.getRouteHeader().getDocRouteStatus();      	 
+    	String documentNumber = document.getDocumentNumber();
+    	String routeNodeNames = workflowDocument.getCurrentRouteNodeNames();
+    	
+    	MaintenanceDocumentEntry objectEntry = getMaintenanceDocumentDictionaryService().getMaintenanceDocumentEntry(documentType);
+    	Map<String, FieldAttributeSecurity> restrictionFields = DocumentAttributeSecurityUtils.getRestrictionMaintainableFields(objectEntry);
+    	
+    	Set keys = restrictionFields.keySet();    
+    	Iterator keyIter = keys.iterator();
+        while (keyIter.hasNext()) { 
+           String fullFieldName = (String) keyIter.next(); 
+           FieldAttributeSecurity fieldAttributeSecurity = (FieldAttributeSecurity) restrictionFields.get(fullFieldName);
+           String fieldName = fieldAttributeSecurity.getAttributeName();
+           
+           //TODO:Should use ParameterService.getDetailType to get the componentName
+           String componentName = fieldAttributeSecurity.getBusinessObjectClass().getSimpleName();
+           
+           AttributeSecurity maintainableFieldAttributeSecurity = (AttributeSecurity) fieldAttributeSecurity.getMaintainableFieldAttributeSecurity();
+           AttributeSecurity  businessObjectAttributeSecurity = (AttributeSecurity) fieldAttributeSecurity.getBusinessObjectAttributeSecurity();
+           
+           AttributeSet permissionDetails = new AttributeSet();
+       	   permissionDetails.put(KimConstants.KIM_ATTRIB_ROUTE_STATUS_CODE, docStatus);
+       	   permissionDetails.put(KimConstants.KIM_ATTRIB_DOCUMENT_TYPE_NAME, documentType);
+       	   permissionDetails.put(KimConstants.KIM_ATTRIB_DOCUMENT_NUMBER, documentNumber);
+    	   permissionDetails.put(KimConstants.KIM_ATTRIB_ROUTE_NODE_NAME, routeNodeNames);
+    	   permissionDetails.put(KimConstants.KIM_ATTRIB_PROPERTY_NAME, fieldName);
+    	   //TODO: Should use ParameterService getNameSpace to get name space
+    	   permissionDetails.put(KimConstants.KIM_ATTRIB_NAMESPACE_CODE, "KFS-SYS");
+    	   
+           
+    	   if(maintainableFieldAttributeSecurity != null){
+    		   permissionDetails.put(KimConstants.KIM_ATTRIB_COMPONENT_NAME, documentType);
+    		   if(maintainableFieldAttributeSecurity.isMask()){  
+    			   if(!getIdentityManagementService().isAuthorized(user.getPersonUniversalIdentifier(), KimConstants.PERMISSION_UNMASK_PROPERTY, permissionDetails, null)){
+    				   auths.addReadonlyAuthField(fullFieldName);
+    			   }
+    		   }
+    	   }
+    	   
+    	   if(businessObjectAttributeSecurity != null){
+    		   permissionDetails.put(KimConstants.KIM_ATTRIB_COMPONENT_NAME, componentName);
+    		   if( businessObjectAttributeSecurity.isMask()){
+               	   if(!getIdentityManagementService().isAuthorized(user.getPersonUniversalIdentifier(), "Unmask Bank Account Number", permissionDetails, null)){
+               		auths.addReadonlyAuthField(fullFieldName);
+               	   }
+    		   }
+    		   
+    	   }
+        }
+    	
+    	return auths;
     }
 
     /**
@@ -170,4 +235,29 @@
         String maintAction = maintDoc.getNewMaintainableObject().getMaintenanceAction();
         return (KNSConstants.MAINTENANCE_NEW_ACTION.equals(maintAction) || KNSConstants.MAINTENANCE_COPY_ACTION.equals(maintAction));
     }
+    
+	/**
+	 * @return the identityManagementService
+	 */
+	public static IdentityManagementService getIdentityManagementService() {
+		
+		if (identityManagementService == null ) {
+			identityManagementService = KIMServiceLocator.getIdentityManagementService();
+		}
+		return identityManagementService;
+	}
+    
+	
+	/**
+	 * @return the maintenanceDocumentDictionaryService
+	 */
+	public static MaintenanceDocumentDictionaryService getMaintenanceDocumentDictionaryService() {
+		
+		if (maintenanceDocumentDictionaryService == null ) {
+			maintenanceDocumentDictionaryService = KNSServiceLocator.getMaintenanceDocumentDictionaryService();
+		}
+		return maintenanceDocumentDictionaryService;
+	}
+
+    
 }
Index: impl/src/main/resources/org/kuali/rice/kns/config/KNSSpringBeans.xml
===================================================================
--- impl/src/main/resources/org/kuali/rice/kns/config/KNSSpringBeans.xml	(revision 5017)
+++ impl/src/main/resources/org/kuali/rice/kns/config/KNSSpringBeans.xml	(working copy)
@@ -896,4 +896,7 @@
 		</property>
 	</bean>	
 	
+	<bean id="DocumentStatusComponentAttributePermissionType" class="org.kuali.rice.kim.service.support.impl.KimPermissionTypeServiceBase" >
+	</bean>
+	
 </beans>
