<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2006-2007 The Kuali Foundation.

  Licensed under the Educational Community License, Version 1.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.opensource.org/licenses/ecl1.php

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

<!-- KENSpringBeans - standard KEN module spring context  -->

    <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>

    <bean class="org.kuali.rice.core.config.spring.ConfigPropertyPlaceholderConfigurer">
        <!-- all our lovely defaults -->
        <property name="properties">
            <props>
                <prop key="kcb.messaging.synchronous">false</prop>
                <prop key="message.delivery">asynchronous</prop>
                <prop key="message.persistence">true</prop>
                <prop key="Routing.ImmediateExceptionRouting">false</prop>
            
                <prop key="notification.resolveMessageDeliveriesJob.startDelayMS">5000</prop>
                <prop key="notification.resolveMessageDeliveriesJob.intervalMS">10000</prop>
            
                <prop key="notification.processUndeliveredJob.startDelayMS">10000</prop>
                <prop key="notification.processUndeliveredJob.intervalMS">10000</prop>
            
                <prop key="notification.processAutoRemovalJob.startDelayMS">60000</prop>
                <prop key="notification.processAutoRemovalJob.intervalMS">60000</prop>
            
                <prop key="notification.quartz.autostartup">true</prop>
                <prop key="notification.concurrent.jobs">true</prop>
            
                <!-- Turn off KEW use of quartz db to avoid db clear issues -->
                <prop key="useQuartzDatabase">false</prop>   
            </props>
        </property>
    </bean>

    <bean id="userTransaction" class="org.kuali.rice.core.jta.UserTransactionFactoryBean" lazy-init="true" />
    <bean id="jtaTransactionManager" class="org.kuali.rice.core.jta.TransactionManagerFactoryBean" lazy-init="true" />

    <bean id="ojbConfigurer" class="org.kuali.rice.core.ojb.JtaOjbConfigurer">
        <property name="transactionManager" ref="jtaTransactionManager" />
    </bean>

    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" lazy-init="true">
        <property name="userTransaction">
            <ref local="userTransaction" />
        </property>
        <property name="transactionManager">
            <ref local="jtaTransactionManager" />
        </property>
    </bean>

    <bean id="kenDataSource" class="org.kuali.rice.core.database.PrimaryDataSourceFactoryBean">
        <property name="preferredDataSourceParams">
            <list>
                <value>org.kuali.ken.datasource</value>
            </list>
        </property>
        <property name="preferredDataSourceJndiParams">
            <list>
                <value>org.kuali.ken.datasource.jndi.location</value>
            </list>
        </property>
    </bean>

    <!-- ken stuff -->

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- resource for "system" properties that do not need to be internationalized -->
                <value>system-messages</value>
                <!-- resources for textual/ui properties may need to be internationalized -->
                <value>messages</value>
            </list>
        </property>
    </bean>

    <!-- Eager-init notification lifecycle -->
    <bean id="lifecycle" class="org.kuali.rice.ken.core.NotificationLifeCycle" lazy-init="false" depends-on="ojbConfigurer"/>

    <!-- Applys a transaction template to the actual transaction manager bean -->
    <!-- This is needed to recognize services as transactions -->
    <bean id="transactionTemplate"
        class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager">
            <ref bean="transactionManager" />
        </property>
    </bean>

    <!-- PROPAGATION REQUIRED TX DECLARATIONS -->
    <!-- Sets up pattern matching for transaction recognition -->
    <!-- This is needed to recognize services as transactions -->
    <bean id="matchAllWithPropReq"
        class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource">
        <property name="transactionAttribute">
            <value>PROPAGATION_REQUIRED</value>
        </property>
    </bean>

    <!-- Applys the pattern matching to the transaction manager bean -->
    <!-- This is needed to recognize servi ces as transactions -->
    <bean id="matchAllTxInterceptor"
        class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager">
            <ref bean="transactionManager" />
        </property>
        <property name="transactionAttributeSource">
            <ref bean="matchAllWithPropReq" />
        </property>
    </bean>

    <!-- All of the beans listed in the beanNames/list section are considered transactional -->
    <bean id="autoProxyCreator"
        class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="interceptorNames">
            <list>
                <idref local="matchAllTxInterceptor" />
            </list>
        </property>
        <property name="beanNames">
            <list>
              <value>messageContentService</value>
              <value>kenApiService</value>
              <value>notificationService</value>
              <value>notificationContentTypeService</value>
              <value>notificationAuthorizationService</value>
              <value>notificationRecipientService</value>
              <value>notificationWorkflowDocumentService</value>
              <value>sendNotificationKewXmlService</value>
              <value>notificationMessageDeliveryService</value>
              <value>userPreferencesService</value>
              <value>genericDao</value>
            </list>
        </property>
    </bean>
    <!--  END PROPAGATION REQUIRED TX DECLARATIONS -->

    <!-- SERVICES -->
    <bean id="messageContentService" class="org.kuali.rice.ken.service.impl.NotificationMessageContentServiceImpl">
      <constructor-arg><ref local="genericDao"/></constructor-arg>
      <constructor-arg><ref local="notificationContentTypeService"/></constructor-arg>
    </bean>

    <bean id="kenApiService" class="org.kuali.rice.ken.service.impl.KENAPIServiceImpl">
      <property name="notificationChannelService" ref="notificationChannelService"/>
      <property name="userPreferenceService" ref="userPreferenceService"/>
      
    </bean>

    <bean id="notificationService" class="org.kuali.rice.ken.service.impl.NotificationServiceImpl">
      <constructor-arg><ref local="genericDao"/></constructor-arg>
      <constructor-arg><ref local="messageContentService"/></constructor-arg>
      <constructor-arg><ref local="notificationAuthorizationService"/></constructor-arg>
      <constructor-arg><ref local="notificationRecipientService"/></constructor-arg>
      <constructor-arg><ref local="notificationWorkflowDocumentService"/></constructor-arg>
      <constructor-arg><ref local="notificationMessageDeliveryService"/></constructor-arg>
    </bean>

    <bean id="notificationContentTypeService" class="org.kuali.rice.ken.service.impl.NotificationContentTypeServiceImpl">
      <constructor-arg><ref local="genericDao"/></constructor-arg>
    </bean>
    
    <bean id="notificationChannelService" class="org.kuali.rice.ken.service.impl.NotificationChannelServiceImpl">
      <constructor-arg><ref local="genericDao"/></constructor-arg>
    </bean>
    
    <bean id="userPreferenceService" class="org.kuali.rice.ken.service.impl.UserPreferenceServiceImpl">
      <constructor-arg><ref local="genericDao"/></constructor-arg>
      <constructor-arg><ref local="notificationChannelService"/></constructor-arg>
    </bean>
    
    <bean id="notificationAuthorizationService" class="org.kuali.rice.ken.service.impl.NotificationAuthorizationServiceImpl">
      <constructor-arg><ref local="genericDao"/></constructor-arg>
    </bean>

    <bean id="notificationRecipientService" class="org.kuali.rice.ken.service.impl.NotificationRecipientServiceKewImpl" />
    
    <bean id="notificationWorkflowDocumentService" class="org.kuali.rice.ken.service.impl.NotificationWorkflowDocumentServiceImpl">
      <constructor-arg><ref local="messageContentService"/></constructor-arg>
    </bean>
    
    <bean id="notificationMessageDeliveryResolverService" class="org.kuali.rice.ken.service.impl.NotificationMessageDeliveryResolverServiceImpl">
      <constructor-arg><ref local="notificationService"/></constructor-arg>
      <constructor-arg><ref local="notificationRecipientService"/></constructor-arg>
      <constructor-arg><ref local="genericDao"/></constructor-arg>
      <constructor-arg><ref bean="transactionManager"/></constructor-arg>
      <constructor-arg><ref bean="resolverExecutor"/></constructor-arg>
      <constructor-arg><ref local="userPreferenceService"/></constructor-arg>
    </bean>

    <bean id="notificationMessageDeliveryAutoRemovalService" class="org.kuali.rice.ken.service.impl.NotificationMessageDeliveryAutoRemovalServiceImpl">
      <constructor-arg><ref local="genericDao"/></constructor-arg>
      <constructor-arg><ref bean="transactionManager"/></constructor-arg>
      <constructor-arg><ref bean="autoRemovalExecutor"/></constructor-arg>
      <constructor-arg><ref local="notificationMessageDeliveryService"/></constructor-arg>
    </bean>

    <bean id="sendNotificationKewXmlService" class="org.kuali.rice.ken.service.impl.SendNotificationServiceKewXmlImpl">
      <constructor-arg><ref local="notificationService"/></constructor-arg>
    </bean>
    
    <bean id="notificationMessageDeliveryService" class="org.kuali.rice.ken.service.impl.NotificationMessageDeliveryServiceImpl">
      <constructor-arg><ref local="genericDao"/></constructor-arg>
    </bean>
    
    <!-- END SERVICES -->
       

    <!-- DAOS -->
    
    <bean id="genericDao" class="org.kuali.rice.core.dao.impl.GenericDaoOjb">
        <property name="jcdAlias">
            <value>kenDataSource</value>
        </property>
    </bean>
    
    <!-- END DAOS -->

    <bean id="resolverExecutor" class="edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor">
        <constructor-arg><value>1</value></constructor-arg> <!--  core pool size -->
        <constructor-arg><value>5</value></constructor-arg> <!-- max pool size -->
        <constructor-arg><value>30</value></constructor-arg> <!-- idle thread keepalive time -->
        <constructor-arg>
            <bean class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
                <property name="staticField"><value>edu.emory.mathcs.backport.java.util.concurrent.TimeUnit.SECONDS</value></property>
            </bean>
        </constructor-arg>
        <constructor-arg><bean class="edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue"/></constructor-arg>
    </bean>
    
    <bean id="autoRemovalExecutor" class="edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor">
        <constructor-arg><value>1</value></constructor-arg> <!--  core pool size -->
        <constructor-arg><value>5</value></constructor-arg> <!-- max pool size -->
        <constructor-arg><value>30</value></constructor-arg> <!-- idle thread keepalive time -->
        <constructor-arg>
            <bean class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
                <property name="staticField"><value>edu.emory.mathcs.backport.java.util.concurrent.TimeUnit.SECONDS</value></property>
            </bean>
        </constructor-arg>
        <constructor-arg><bean class="edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue"/></constructor-arg>
    </bean>


    <!-- export our sendNotificationKewXmlService -->
    <bean class="org.kuali.rice.ksb.messaging.KSBExporter">
        <property name="serviceDefinition">
            <bean class="org.kuali.rice.ksb.messaging.JavaServiceDefinition">
                <property name="service">
                    <ref bean="sendNotificationKewXmlService" />
                </property>
                <property name="localServiceName" value="sendNotificationKewXmlService" />
                <property name="priority" value="10" />
                <property name="retryAttempts" value="1" />
            </bean>
        </property>
        <!-- THIS IS NEEDED FOR THE KEWINTEGRATIONTEST TO OBSERVE THE SERVICE ON THE BUS... -->
        <property name="forceRefresh" value="true"/>
    </bean>
    
    <bean class="org.kuali.rice.ksb.messaging.KSBExporter">
        <property name="serviceDefinition">
            <bean class="org.kuali.rice.ksb.messaging.SOAPServiceDefinition">
                <property name="service">
                    <ref bean="sendNotificationKewXmlService" />
                </property>
                <property name="localServiceName" value="sendNotificationKewXmlSOAPService" />
                <property name="priority" value="10" />
                <property name="retryAttempts" value="1" />
            </bean>
        </property>
        <!-- THIS IS NEEDED FOR THE KEWINTEGRATIONTEST TO OBSERVE THE SERVICE ON THE BUS... -->
        <property name="forceRefresh" value="true"/>
    </bean>
    
    <!-- Export the KEN api service -->
    <bean class="org.kuali.rice.ksb.messaging.KSBExporter">
        <property name="serviceDefinition">
            <bean class="org.kuali.rice.ksb.messaging.JavaServiceDefinition">
                <property name="service">
                    <ref bean="kenApiService" />
                </property>
                <property name="localServiceName" value="KEN-KENAPIService" />
                <property name="priority" value="10" />
                <property name="retryAttempts" value="1" />
            </bean>
        </property>
        <property name="forceRefresh" value="true"/>
    </bean>
    
    <!-- Quartz beans -->    

    <!-- Define the job(s) -->
    <!-- Resolve Notification Message Deliveries Job -->
    <bean id="resolveNotificationMessageDeliveriesJob"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="notificationMessageDeliveryResolverService" />
        <property name="targetMethod" value="resolveNotificationMessageDeliveries" />
        <property name="concurrent" value="${notification.concurrent.jobs}" />
    </bean>

    <!-- Message Delivery Auto Remove Job -->
    <bean id="processAutoRemovalOfDeliveredNotificationMessageDeliveriesJob"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="notificationMessageDeliveryAutoRemovalService" />
        <property name="targetMethod" value="processAutoRemovalOfDeliveredNotificationMessageDeliveries" />
        <property name="concurrent" value="${notification.concurrent.jobs}" />
    </bean>

    <!-- Define the trigger(s) -->
    <!-- Set up the trigger for Resolving the Notification Message Deliveries (a.k.a. the periodic interval that this will run at) -->
    <bean id="resolveNotificationMessageDeliveriesJobTrigger"
        class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="resolveNotificationMessageDeliveriesJob" />
        <property name="startDelay" value="${notification.resolveMessageDeliveriesJob.startDelayMS}" />
        <property name="repeatInterval" value="${notification.resolveMessageDeliveriesJob.intervalMS}" />
    </bean>
    <!-- Set up the trigger for the Notification Message Delivery (a.k.a. the periodic interval that this will run at) -->
    <!--
    <bean id="processUndeliveredNotificationMessageDeliveriesJobTrigger"
        class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="processUndeliveredNotificationMessageDeliveriesJob" />
        <property name="startDelay" value="${notification.processUndeliveredJob.startDelayMS}" />
        <property name="repeatInterval" value="${notification.processUndeliveredJob.intervalMS}" />
    </bean>
     -->
    <!-- Set up the trigger for the Notification Message Delivery Auto-Remove Job (a.k.a. the periodic interval that this will run at) -->
    <bean id="processAutoRemovalOfDeliveredNotificationMessageDeliveriesJobTrigger"
        class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="processAutoRemovalOfDeliveredNotificationMessageDeliveriesJob" />
        <property name="startDelay" value="${notification.processAutoRemovalJob.startDelayMS}" />
        <property name="repeatInterval" value="${notification.processAutoRemovalJob.intervalMS}" />
    </bean>

    <!-- Configure the Quartz job scheduler -->
    <bean id="notificationScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="resolveNotificationMessageDeliveriesJobTrigger" />
<!--
                <ref bean="processUndeliveredNotificationMessageDeliveriesJobTrigger" />
-->
                <ref bean="processAutoRemovalOfDeliveredNotificationMessageDeliveriesJobTrigger" />
            </list>
        </property>
        <property name="autoStartup"><value>${notification.quartz.autostartup}</value></property>
    </bean>

  <!-- START JPA CONFIGURATION -->

  <!-- Used for @PersistenceContext auto-injection -->
  <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

  <bean id="entityManagerFactory" class="org.kuali.rice.core.jpa.spring.RiceEntityManagerProxyFactoryBean">    
    <constructor-arg value="rice.ken"/>
    <constructor-arg ref="kenDataSource"/>
  </bean>

  <!-- Used for @Transactional so you don't have to wire services up in here -->
  <tx:annotation-driven transaction-manager="transactionManager"/>
  
  <bean id="NoResultExceptionInterceptor" class="org.kuali.rice.core.jpa.spring.NoResultExceptionInterceptor" />

  <!-- 
  <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
    <property name="interceptorNames">
      <list>
        <idref local="NoResultExceptionInterceptor" />
      </list>
    </property>
    <property name="beanNames">
      <list>
        <idref local="..."/>        
      </list>
    </property>
  </bean>
  -->
  
  <!-- END JPA CONFIGURATION -->

</beans>